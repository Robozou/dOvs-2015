1----- test01 -----
1----- test02 -----
1----- test03 -----
40,66c40,41
<               MEM(
<                 ESEQ(
<                   SEQ(
<                     MOVE(
<                       TEMP t110,
<                       MEM(
<                         BINOP(PLUS,
<                           FP,
<                           CONST ~4))),
<                     SEQ(
<                       CJUMP(EQ,
<                         TEMP t110,
<                         CONST 0,
<                         L2_fvar_nil,L3_fvar_nnil),
<                       SEQ(
<                         LABEL L2_fvar_nil,
<                         SEQ(
<                           EXP(
<                             CALL(
<                               NAME recFieldError)),
<                           LABEL L3_fvar_nnil)))),
<                   BINOP(PLUS,
<                     TEMP t110,
<                     BINOP(MUL,
<                       CONST 0,
<                       CONST 4)))),
<               NAME L4_string),
---
>               CONST 0,
>               NAME L2_string),
74c49
< STRING L4_string = "Somebody"
---
> STRING L2_string = "Somebody"
----- test04 -----
18,72d17
< PROC {name = L1_nfactor, formals = tt, locals = 0}
< SEQ(
<   EXP(
<     CONST 0),
<   SEQ(
<     EXP(
<       CONST 0),
<     SEQ(
<       MOVE(
<         RV,
<         ESEQ(
<           SEQ(
<             CJUMP(EQ,
<               MEM(
<                 BINOP(PLUS,
<                   FP,
<                   CONST 12)),
<               CONST 0,
<               L2_if_then,L3_if_else),
<             SEQ(
<               LABEL L2_if_then,
<               SEQ(
<                 MOVE(
<                   TEMP t109,
<                   CONST 1),
<                 SEQ(
<                   JUMP(
<                     NAME L4_if_join),
<                   SEQ(
<                     LABEL L3_if_else,
<                     SEQ(
<                       MOVE(
<                         TEMP t109,
<                         BINOP(MUL,
<                           MEM(
<                             BINOP(PLUS,
<                               FP,
<                               CONST 12)),
<                           CALL(
<                             NAME L1_nfactor,
<                             MEM(
<                               BINOP(PLUS,
<                                 FP,
<                                 CONST 8)),
<                             BINOP(MINUS,
<                               MEM(
<                                 BINOP(PLUS,
<                                   FP,
<                                   CONST 12)),
<                               CONST 1)))),
<                       LABEL L4_if_join)))))),
<           TEMP t109)),
<       EXP(
<         CONST 0))))
< 
1----- test05 -----
1,2c1,46
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             ESEQ(
>               SEQ(
>                 MOVE(
>                   TEMP t109,
>                   CALL(
>                     NAME allocRecord,
>                     CONST 2)),
>                 SEQ(
>                   MOVE(
>                     MEM(
>                       BINOP(PLUS,
>                         TEMP t109,
>                         CONST 0)),
>                     CONST 0),
>                   MOVE(
>                     MEM(
>                       BINOP(PLUS,
>                         TEMP t109,
>                         CONST 4)),
>                     CONST 0))),
>               TEMP t109)),
>           MEM(
>             BINOP(PLUS,
>               FP,
>               CONST ~4)))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
----- test06 -----
1,2c1,64
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 3}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         CALL(
>           NAME L2_do_nothing1,
>           FP,
>           CONST 0,
>           NAME L6_string)),
>       EXP(
>         CONST 0))))
> 
> STRING L6_string = "str2"
> 
> PROC {name = L5_do_nothing1, formals = tttt, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         CALL(
>           NAME L1_do_nothing2,
>           FP,
>           BINOP(PLUS,
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~8)),
>             CONST 1))),
>       EXP(
>         CONST 0))))
> 
> PROC {name = L3_do_nothing2, formals = ttt, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         CALL(
>           NAME L2_do_nothing1,
>           FP,
>           MEM(
>             BINOP(PLUS,
>               FP,
>               CONST ~4)),
>           NAME L4_string)),
>       EXP(
>         CONST 0))))
> 
> STRING L4_string = "str"
> 
> STRING L0_string = "DefaultString"
> 
----- test07 -----
1,2c1,75
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 3}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CALL(
>           NAME L2_do_nothing1,
>           FP,
>           CONST 0,
>           NAME L7_string)),
>       EXP(
>         CONST 0))))
> 
> STRING L7_string = "str2"
> 
> PROC {name = L6_do_nothing1, formals = tttt, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           EXP(
>             CALL(
>               NAME L1_do_nothing2,
>               FP,
>               BINOP(PLUS,
>                 MEM(
>                   BINOP(PLUS,
>                     FP,
>                     CONST ~8)),
>                 CONST 1))),
>           CONST 0)),
>       EXP(
>         CONST 0))))
> 
> PROC {name = L3_do_nothing2, formals = ttt, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           EXP(
>             CALL(
>               NAME L2_do_nothing1,
>               FP,
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~4)),
>               NAME L4_string)),
>           NAME L5_string)),
>       EXP(
>         CONST 0))))
> 
> STRING L5_string = " "
> 
> STRING L4_string = "str"
> 
> STRING L0_string = "DefaultString"
> 
----- test08 -----
1----- test12 -----
1,2c1,22
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CONST 0),
>           CONST 0)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
1----- test27 -----
1,2c1,43
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 2}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CONST 0),
>           CALL(
>             NAME L1_g,
>             FP,
>             CONST 2))),
>       EXP(
>         CONST 0))))
> 
> PROC {name = L2_g, formals = ttt, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         MEM(
>           BINOP(PLUS,
>             FP,
>             CONST ~8))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
1----- test30 -----
1,2c1,64
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CALL(
>               NAME initArray,
>               CONST 10,
>               CONST 0)),
>           MEM(
>             ESEQ(
>               SEQ(
>                 MOVE(
>                   TEMP t109,
>                   CONST 2),
>                 SEQ(
>                   MOVE(
>                     TEMP t110,
>                     MEM(
>                       BINOP(PLUS,
>                         FP,
>                         CONST ~4))),
>                   SEQ(
>                     MOVE(
>                       TEMP t111,
>                       BINOP(MUL,
>                         CONST 2,
>                         CONST 4)),
>                     SEQ(
>                       EXP(
>                         TEMP t112),
>                       SEQ(
>                         LABEL L1_subs_neg,
>                         SEQ(
>                           LABEL L2_subs_nneg,
>                           SEQ(
>                             LABEL L3_subs_ovf,
>                             LABEL L4_subs_novf))))))),
>               MEM(
>                 BINOP(PLUS,
>                   MEM(
>                     MEM(
>                       BINOP(PLUS,
>                         FP,
>                         CONST ~4))),
>                   BINOP(MUL,
>                     CONST 2,
>                     CONST 4))))))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
2----- test37 -----
1,2c1,35
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 2}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           SEQ(
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~4)),
>               CONST 0),
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~8)),
>               NAME L1_string)),
>           MEM(
>             BINOP(PLUS,
>               FP,
>               CONST ~8)))),
>       EXP(
>         CONST 0))))
> 
> STRING L1_string = " "
> 
> STRING L0_string = "DefaultString"
> 
----- test41 -----
1,2c1,16
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CONST 0),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
../testcases/test42.tig:17.5:variable name not found
../testcases/test42.tig:18.5:variable name not found
../testcases/test42.tig:21.5:variable name not found
../testcases/test42.tig:24.5:variable name not found
../testcases/test42.tig:25.5:variable name not found
5----- test42 -----
1----- test44 -----
1,2c1,29
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CONST 0),
>           ESEQ(
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~4)),
>               CONST 0),
>             CONST 0))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
----- test46 -----
1----- test47 -----
1,2c1,23
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CONST 4),
>           CONST 0)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
----- test48 -----
1,2c1,50
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 2}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CONST 0),
>       EXP(
>         CONST 0))))
> 
> PROC {name = L4_g, formals = ttt, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         MEM(
>           BINOP(PLUS,
>             FP,
>             CONST ~8))),
>       EXP(
>         CONST 0))))
> 
> PROC {name = L2_g, formals = ttt, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         MEM(
>           BINOP(PLUS,
>             FP,
>             CONST ~4))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
1----- test51 -----
1,2c1,54
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             ESEQ(
>               SEQ(
>                 MOVE(
>                   TEMP t109,
>                   CALL(
>                     NAME allocRecord,
>                     CONST 2)),
>                 SEQ(
>                   MOVE(
>                     MEM(
>                       BINOP(PLUS,
>                         TEMP t109,
>                         CONST 0)),
>                     CONST 1000),
>                   MOVE(
>                     MEM(
>                       BINOP(PLUS,
>                         TEMP t109,
>                         CONST 4)),
>                     NAME L1_string))),
>               TEMP t109)),
>           ESEQ(
>             MOVE(
>               CONST 0,
>               NAME L2_string),
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4))))),
>       EXP(
>         CONST 0))))
> 
> STRING L2_string = "Somebody"
> 
> STRING L1_string = "Nobody"
> 
> STRING L0_string = "DefaultString"
> 
1----- test52 -----
1,2c1,29
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CALL(
>               NAME initArray,
>               CONST 10,
>               CONST 1)),
>           MEM(
>             BINOP(PLUS,
>               FP,
>               CONST ~4)))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
----- test53 -----
1,2c1,33
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CALL(
>           NAME L1_f,
>           FP,
>           CONST 10)),
>       EXP(
>         CONST 0))))
> 
> PROC {name = L2_f, formals = ttt, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CONST 42),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
----- test54 -----
1,2c1,18
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         BINOP(PLUS,
>           CONST 2,
>           CONST 2)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
----- test55 -----
1,2c1,18
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         BINOP(MUL,
>           CONST 3,
>           CONST 3)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
----- test56 -----
1,2c1,20
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         BINOP(PLUS,
>           BINOP(PLUS,
>             CONST 2,
>             CONST 3),
>           CONST 4)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
----- test57 -----
----- test58 -----
1,2c1,23
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         CALL(
>           NAME print,
>           MEM(
>             BINOP(PLUS,
>               CONST 8,
>               FP)),
>           NAME L1_string)),
>       EXP(
>         CONST 0))))
> 
> STRING L1_string = "."
> 
> STRING L0_string = "DefaultString"
> 
1----- test59 -----
1,2c1,53
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CONST 0),
>           ESEQ(
>             EXP(
>               CALL(
>                 NAME L1_f,
>                 FP)),
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4))))),
>       EXP(
>         CONST 0))))
> 
> PROC {name = L2_f, formals = tt, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         MEM(
>           BINOP(PLUS,
>             FP,
>             CONST ~4)),
>         BINOP(PLUS,
>           MEM(
>             BINOP(PLUS,
>               FP,
>               CONST ~4)),
>           CONST 1)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
----- test60 -----
1,2c1,23
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CALL(
>           NAME stringNotEq,
>           NAME L1_string,
>           NAME L2_string)),
>       EXP(
>         CONST 0))))
> 
> STRING L2_string = "whateverelse"
> 
> STRING L1_string = "whatever"
> 
> STRING L0_string = "DefaultString"
> 
1----- test61 -----
1,2c1,33
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             NAME L1_string),
>           CALL(
>             NAME stringGreater,
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             NAME L2_string))),
>       EXP(
>         CONST 0))))
> 
> STRING L2_string = "else"
> 
> STRING L1_string = "whatever"
> 
> STRING L0_string = "DefaultString"
> 
1----- test62 -----
1,2c1,49
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             NAME L1_string),
>           CALL(
>             NAME L2_compare,
>             FP))),
>       EXP(
>         CONST 0))))
> 
> PROC {name = L3_compare, formals = tt, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CALL(
>           NAME stringGreater,
>           MEM(
>             BINOP(PLUS,
>               FP,
>               CONST ~4)),
>           NAME L4_string)),
>       EXP(
>         CONST 0))))
> 
> STRING L4_string = "else"
> 
> STRING L1_string = "whatever"
> 
> STRING L0_string = "DefaultString"
> 
----- test63 -----
----- test64 -----
----- test65 -----
1,2c1,49
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           SEQ(
>             MOVE(
>               TEMP t109,
>               CONST 1),
>             SEQ(
>               CJUMP(GE,
>                 CALL(
>                   NAME ord,
>                   MEM(
>                     BINOP(PLUS,
>                       CONST 8,
>                       FP)),
>                   NAME L1_string),
>                 CALL(
>                   NAME ord,
>                   MEM(
>                     BINOP(PLUS,
>                       CONST 8,
>                       FP)),
>                   NAME L2_string),
>                 L3_unEx_t,L4_unEx_f),
>               SEQ(
>                 LABEL L4_unEx_f,
>                 SEQ(
>                   MOVE(
>                     TEMP t109,
>                     CONST 0),
>                   LABEL L3_unEx_t)))),
>           TEMP t109)),
>       EXP(
>         CONST 0))))
> 
> STRING L2_string = "0"
> 
> STRING L1_string = "1"
> 
> STRING L0_string = "DefaultString"
> 
----- test66 -----
1,2c1,33
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           SEQ(
>             MOVE(
>               TEMP t109,
>               CONST 1),
>             SEQ(
>               CJUMP(GE,
>                 CONST 1,
>                 CONST 0,
>                 L1_unEx_t,L2_unEx_f),
>               SEQ(
>                 LABEL L2_unEx_f,
>                 SEQ(
>                   MOVE(
>                     TEMP t109,
>                     CONST 0),
>                   LABEL L1_unEx_t)))),
>           TEMP t109)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
----- test67 -----
1,2c1,33
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           SEQ(
>             MOVE(
>               TEMP t109,
>               CONST 1),
>             SEQ(
>               CJUMP(LT,
>                 CONST 1,
>                 CONST 2,
>                 L1_unEx_t,L2_unEx_f),
>               SEQ(
>                 LABEL L2_unEx_f,
>                 SEQ(
>                   MOVE(
>                     TEMP t109,
>                     CONST 0),
>                   LABEL L1_unEx_t)))),
>           TEMP t109)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
2----- test68 -----
1,2c1,39
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 2}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         ESEQ(
>           SEQ(
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~4)),
>               CONST 1),
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~8)),
>               CONST 2)),
>           ESEQ(
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~4)),
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~8))),
>             CONST 0))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
----- test69 -----
1,2c1,24
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CALL(
>           NAME ord,
>           MEM(
>             BINOP(PLUS,
>               CONST 8,
>               FP)),
>           NAME L1_string)),
>       EXP(
>         CONST 0))))
> 
> STRING L1_string = "0"
> 
> STRING L0_string = "DefaultString"
> 
----- test70 -----
1,2c1,24
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           EXP(
>             CONST 0),
>           CALL(
>             NAME getchar,
>             MEM(
>               BINOP(PLUS,
>                 CONST 8,
>                 FP))))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
1----- test71 -----
1,2c1,31
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             ESEQ(
>               EXP(
>                 CONST 0),
>               CALL(
>                 NAME getchar,
>                 MEM(
>                   BINOP(PLUS,
>                     CONST 8,
>                     FP))))),
>           CONST 0)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
----- test72 -----
----- test73 -----
----- test74 -----
1,2c1,20
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         BINOP(MUL,
>           CONST 4,
>           BINOP(MUL,
>             CONST 3,
>             CONST 2))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
----- test75 -----
----- test76 -----
----- merge -----
../testcases/queens.tig:26.24:variable name not found
../testcases/queens.tig:26.35:variable name not found
../testcases/queens.tig:26.50:variable name not found
../testcases/queens.tig:27.24:variable name not found
../testcases/queens.tig:29.24:variable name not found
../testcases/queens.tig:29.35:variable name not found
../testcases/queens.tig:29.50:variable name not found
../testcases/queens.tig:26.24:variable name not found
../testcases/queens.tig:26.35:variable name not found
../testcases/queens.tig:26.50:variable name not found
../testcases/queens.tig:27.24:variable name not found
../testcases/queens.tig:29.24:variable name not found
../testcases/queens.tig:29.35:variable name not found
../testcases/queens.tig:29.50:variable name not found
----- queens -----
----- test09 -----
1,2c1
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test09.tig:2.1:type mismatch, expected INT but found STRING
----- test10 -----
1,2c1
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test10.tig:2.1:type mismatch, expected UNIT but found INT
----- test11 -----
1,2c1,2
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test11.tig:2.23:can't assign to variable i
> ../testcases/test11.tig:2.1:type mismatch, expected INT but found STRING
----- test13 -----
1,2c1
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test13.tig:2.1:type mismatch, expected INT but found STRING
----- test14 -----
1,2c1
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test14.tig:9.8:type mismatch, expected NIL but found ARRAY of INT
----- test15 -----
1,2c1
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test15.tig:2.1:type mismatch, expected UNIT but found INT
----- test16 -----
1,2c1,4
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test16.tig:6.2:found cycle for d in type dec list [ c a d ]
> ../testcases/test16.tig:5.2:found cycle for c in type dec list [ a d c ]
> ../testcases/test16.tig:4.2:found cycle for a in type dec list [ d c a b ]
> ../testcases/test16.tig:3.2:found cycle for a in type dec list [ d c a ]
----- test17 -----
1,2c1,2
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test17.tig:4.28:type  treelist undefined
> 1
\ No newline at end of file
----- test18 -----
1,2c1,3
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test18.tig:4.10:function do_nothing2 is undefined
> ../testcases/test18.tig:4.10:function do_nothing2 is undefined
> 1
\ No newline at end of file
----- test19 -----
1,2c1,4
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test19.tig:8.22:var a is undefined
> ../testcases/test19.tig:8.10:type mismatch, expected INT but found ERROR
> ../testcases/test19.tig:8.22:var a is undefined
> ../testcases/test19.tig:8.10:type mismatch, expected INT but found ERROR
----- test20 -----
1,2c1,2
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test20.tig:2.18:var i is undefined
> ../testcases/test20.tig:2.18:type mismatch, expected INT but found ERROR
----- test21 -----
1,2c1,3
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test21.tig:5.31:type mismatch, expected INT but found UNIT
> ../testcases/test21.tig:5.31:type mismatch, expected INT but found UNIT
> ../testcases/test21.tig:4.5:type mismatch, expected UNIT but found INT
----- test22 -----
1,2c1,3
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test22.tig:6.5:field 'nam' not in record
> ../testcases/test22.tig:6.5:type mismatch, expected ERROR but found STRING
> 1
\ No newline at end of file
----- test23 -----
1,2c1,3
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test23.tig:6.5:type mismatch, expected STRING but found INT
> ../testcases/test23.tig:7.5:type mismatch, expected INT but found STRING
> 1
\ No newline at end of file
----- test24 -----
1,2c1,2
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test24.tig:5.5:type mismatch, expected array but found INT
> 1
\ No newline at end of file
----- test25 -----
1,2c1,2
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test25.tig:5.5:type mismatch, expected record but found INT
> 1
\ No newline at end of file
----- test26 -----
1,2c1
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test26.tig:2.1:type mismatch, expected INT but found STRING
----- test28 -----
1,2c1,8
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test28.tig:6.15:type mismatch, expected RECORD
>   name: STRING
>   id: INT
> END but found RECORD
>   name: STRING
>   id: INT
> END
> 1
\ No newline at end of file
----- test29 -----
1,2c1,2
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test29.tig:6.15:type mismatch, expected ARRAY of INT but found ARRAY of INT
> 1
\ No newline at end of file
----- test31 -----
1,2c1,2
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test31.tig:3.12:type mismatch, expected INT but found STRING
> 1
\ No newline at end of file
----- test32 -----
1,2c1,2
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test32.tig:4.14:type mismatch, expected INT but found STRING
> 1
\ No newline at end of file
----- test33 -----
1,2c1,2
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test33.tig:3.14:type  rectype undefined
> 1
\ No newline at end of file
----- test34 -----
1,2c1
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test34.tig:5.5:type mismatch, expected INT but found STRING
----- test35 -----
1,2c1
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test35.tig:5.5:found argument list of length 1 but should have been 2
----- test36 -----
1,2c1
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test36.tig:5.5:found argument list of length 3 but should have been 2
----- test38 -----
1,2c1
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test38.tig:6.5:duplicate a
----- test39 -----
1,2c1
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test39.tig:6.5:duplicate g
----- test40 -----
1,2c1
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test40.tig:3.5:type mismatch, expected UNIT but found INT
----- test43 -----
1,2c1,2
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test43.tig:3.5:unit type not allowed
> ../testcases/test43.tig:5.5:type mismatch, expected INT but found ERROR
----- test45 -----
1,2c1,2
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test45.tig:5.5:need to give a a type when assigning the value nil
> 1
\ No newline at end of file
----- test49 -----
1,2c1,3
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test49.tig:5.22:syntax error: inserting  PLUS
> ../testcases/test49.tig:5.14:var rectype is undefined
> ../testcases/test49.tig:5.14:type mismatch, expected INT but found ERROR
----- test50 -----
1,2c1
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test50.tig:2.23:can't assign to variable i
