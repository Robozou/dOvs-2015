(ARRAY of INT, LetExp([
  | TypeDec[
  |   (arrtype,
  |   | NAME arrtype = ARRAY of INT)],
  | VarDec(arr1,true,NAME arrtype = ARRAY of INT,
  |   (NAME arrtype = ARRAY of INT, ArrayExp(
  |   |   (INT, IntExp(10)),
  |   |   (INT, IntExp(0)))))],
  | (ARRAY of INT, SeqExp[
  |   | (ARRAY of INT, VarExp(
  |   |   | SimpleVar(arr1, ARRAY of INT)))])))
1----- test01 -----
(ARRAY of INT, LetExp([
  | TypeDec[
  |   (arrtype,
  |   | NAME arrtype = ARRAY of NAME myint = INT),
  |   (myint,
  |   | NAME myint = INT)],
  | VarDec(arr1,true,NAME arrtype = ARRAY of NAME myint = INT,
  |   (NAME arrtype = ARRAY of NAME myint = INT, ArrayExp(
  |   |   (INT, IntExp(10)),
  |   |   (INT, IntExp(0)))))],
  | (ARRAY of INT, SeqExp[
  |   | (ARRAY of INT, VarExp(
  |   |   | SimpleVar(arr1, ARRAY of INT)))])))
1----- test02 -----
(RECORD
  name: STRING
  age: INT
END, LetExp([
  | TypeDec[
  |   (rectype,
  |   | NAME rectype = RECORD
  name: STRING
  age: INT
END)],
  | VarDec(rec1,true,NAME rectype = RECORD
  name: STRING
  age: INT
END,
  |   (NAME rectype = RECORD
  name: STRING
  age: INT
END, RecordExp([
  |   |   (name,
  |   |   | (STRING, StringExp("Nobody"))),
  |   |   (age,
  |   |   | (INT, IntExp(1000)))])))],
  | (RECORD
  name: STRING
  age: INT
END, SeqExp[
  |   | (UNIT, AssignExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(rec1, RECORD
  name: STRING
  age: INT
END),
  |   |   |   name, STRING),
  |   |   | (STRING, StringExp("Somebody")))),
  |   | (RECORD
  name: STRING
  age: INT
END, VarExp(
  |   |   | SimpleVar(rec1, RECORD
  name: STRING
  age: INT
END)))])))
1----- test03 -----
17,37c17
<             ESEQ(
<               SEQ(
<                 MOVE(
<                   TEMP t109,
<                   CALL(
<                     NAME allocRecord,
<                     CONST 2)),
<                 SEQ(
<                   MOVE(
<                     MEM(
<                       BINOP(PLUS,
<                         TEMP t109,
<                         CONST 0)),
<                     NAME L1_string),
<                   MOVE(
<                     MEM(
<                       BINOP(PLUS,
<                         TEMP t109,
<                         CONST 4)),
<                     CONST 1000))),
<               TEMP t109)),
---
>             CONST 0),
40,66c20,21
<               MEM(
<                 ESEQ(
<                   SEQ(
<                     MOVE(
<                       TEMP t110,
<                       MEM(
<                         BINOP(PLUS,
<                           FP,
<                           CONST ~4))),
<                     SEQ(
<                       CJUMP(EQ,
<                         TEMP t110,
<                         CONST 0,
<                         L2_fvar_nil,L3_fvar_nnil),
<                       SEQ(
<                         LABEL L2_fvar_nil,
<                         SEQ(
<                           EXP(
<                             CALL(
<                               NAME recFieldError)),
<                           LABEL L3_fvar_nnil)))),
<                   BINOP(PLUS,
<                     TEMP t110,
<                     BINOP(MUL,
<                       CONST 0,
<                       CONST 4)))),
<               NAME L4_string),
---
>               CONST 0,
>               NAME L1_string),
74,76c29
< STRING L4_string = "Somebody"
< 
< STRING L1_string = "Nobody"
---
> STRING L1_string = "Somebody"
(INT, LetExp([
  | FunctionDec[
  |   (nfactor,[
  |   | (n,true,INT)],
  |   | INT,
  |   | (INT, IfExp(
  |   |   | (INT, OpExp(EqOp,
  |   |   |   | (INT, VarExp(
  |   |   |   |   | SimpleVar(n, INT))),
  |   |   |   | (INT, IntExp(0)))),
  |   |   | (INT, IntExp(1)),
  |   |   | (INT, OpExp(TimesOp,
  |   |   |   | (INT, VarExp(
  |   |   |   |   | SimpleVar(n, INT))),
  |   |   |   | (INT, CallExp(nfactor,[
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(n, INT))),
  |   |   |   |   |   | (INT, IntExp(1))))])))))))]],
  | (INT, SeqExp[
  |   | (INT, CallExp(nfactor,[
  |   |   | (INT, IntExp(10))]))])))
----- test04 -----
11,69c11
<         CALL(
<           NAME L1_nfactor,
<           FP,
<           CONST 10)),
<       EXP(
<         CONST 0))))
< 
< PROC {name = L1_nfactor, formals = tt, locals = 0}
< SEQ(
<   EXP(
<     CONST 0),
<   SEQ(
<     EXP(
<       CONST 0),
<     SEQ(
<       MOVE(
<         RV,
<         ESEQ(
<           SEQ(
<             CJUMP(EQ,
<               MEM(
<                 BINOP(PLUS,
<                   FP,
<                   CONST 12)),
<               CONST 0,
<               L2_if_then,L3_if_else),
<             SEQ(
<               LABEL L2_if_then,
<               SEQ(
<                 MOVE(
<                   TEMP t109,
<                   CONST 1),
<                 SEQ(
<                   JUMP(
<                     NAME L4_if_join),
<                   SEQ(
<                     LABEL L3_if_else,
<                     SEQ(
<                       MOVE(
<                         TEMP t109,
<                         BINOP(MUL,
<                           MEM(
<                             BINOP(PLUS,
<                               FP,
<                               CONST 12)),
<                           CALL(
<                             NAME L1_nfactor,
<                             MEM(
<                               BINOP(PLUS,
<                                 FP,
<                                 CONST 8)),
<                             BINOP(MINUS,
<                               MEM(
<                                 BINOP(PLUS,
<                                   FP,
<                                   CONST 12)),
<                               CONST 1)))),
<                       LABEL L4_if_join)))))),
<           TEMP t109)),
---
>         CONST 0),
(RECORD
  hd: INT
  tl: NAME intlist
END, LetExp([
  | TypeDec[
  |   (treelist,
  |   | NAME treelist = RECORD
  hd: NAME tree
  tl: NAME treelist
END),
  |   (tree,
  |   | NAME tree = RECORD
  key: INT
  children: NAME treelist
END),
  |   (intlist,
  |   | NAME intlist = RECORD
  hd: INT
  tl: NAME intlist
END)],
  | VarDec(lis,true,NAME intlist = RECORD
  hd: INT
  tl: NAME intlist
END,
  |   (NAME intlist = RECORD
  hd: INT
  tl: NAME intlist
END, RecordExp([
  |   |   (hd,
  |   |   | (INT, IntExp(0))),
  |   |   (tl,
  |   |   | (NIL, NilExp))])))],
  | (RECORD
  hd: INT
  tl: NAME intlist
END, SeqExp[
  |   | (RECORD
  hd: INT
  tl: NAME intlist
END, VarExp(
  |   |   | SimpleVar(lis, RECORD
  hd: INT
  tl: NAME intlist
END)))])))
1----- test05 -----
1,2c1,26
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CONST 0),
>           MEM(
>             BINOP(PLUS,
>               FP,
>               CONST ~4)))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(UNIT, LetExp([
  | FunctionDec[
  |   (do_nothing2,[
  |   | (d,true,INT)],
  |   | UNIT,
  |   | (UNIT, CallExp(do_nothing1,[
  |   |   | (INT, VarExp(
  |   |   |   | SimpleVar(d, INT))),
  |   |   | (STRING, StringExp("str"))]))),
  |   (do_nothing1,[
  |   | (a,true,INT),
  |   | (b,true,STRING)],
  |   | UNIT,
  |   | (UNIT, CallExp(do_nothing2,[
  |   |   | (INT, OpExp(PlusOp,
  |   |   |   | (INT, VarExp(
  |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   | (INT, IntExp(1))))])))]],
  | (UNIT, SeqExp[
  |   | (UNIT, CallExp(do_nothing1,[
  |   |   | (INT, IntExp(0)),
  |   |   | (STRING, StringExp("str2"))]))])))
----- test06 -----
1,2c1,15
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         CONST 0),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, LetExp([
  | FunctionDec[
  |   (do_nothing2,[
  |   | (d,true,INT)],
  |   | STRING,
  |   | (STRING, SeqExp[
  |   |   | (INT, CallExp(do_nothing1,[
  |   |   |   | (INT, VarExp(
  |   |   |   |   | SimpleVar(d, INT))),
  |   |   |   | (STRING, StringExp("str"))])),
  |   |   | (STRING, StringExp(" "))])),
  |   (do_nothing1,[
  |   | (a,true,INT),
  |   | (b,true,STRING)],
  |   | INT,
  |   | (INT, SeqExp[
  |   |   | (STRING, CallExp(do_nothing2,[
  |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   | (INT, IntExp(1))))])),
  |   |   | (INT, IntExp(0))]))]],
  | (INT, SeqExp[
  |   | (INT, CallExp(do_nothing1,[
  |   |   | (INT, IntExp(0)),
  |   |   | (STRING, StringExp("str2"))]))])))
----- test07 -----
1,2c1,16
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CONST 0),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, IfExp(
  | (INT, SeqExp[
  |   | (INT, OpExp(GtOp,
  |   |   | (INT, IntExp(10)),
  |   |   | (INT, IntExp(20))))]),
  | (INT, IntExp(30)),
  | (INT, IntExp(40))))
----- test08 -----
(UNIT, LetExp([
  | VarDec(a,true,INT,
  |   (INT, IntExp(0)))],
  | (UNIT, SeqExp[
  |   | (UNIT, ForExp(i,true,
  |   |   | (INT, IntExp(0)),
  |   |   | (INT, IntExp(100)),
  |   |   | (UNIT, SeqExp[
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(1)))))),
  |   |   |   | (UNIT, SeqExp[])])))])))
1----- test12 -----
1,2c1,22
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CONST 0),
>           CONST 0)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, LetExp([
  | VarDec(a,true,INT,
  |   (INT, IntExp(0))),
  | FunctionDec[
  |   (g,[
  |   | (a,true,INT)],
  |   | INT,
  |   | (INT, VarExp(
  |   |   | SimpleVar(a, INT))))]],
  | (INT, SeqExp[
  |   | (INT, CallExp(g,[
  |   |   | (INT, IntExp(2))]))])))
1----- test27 -----
1,2c1,23
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CONST 0),
>           CONST 0)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, LetExp([
  | TypeDec[
  |   (b,
  |   | NAME b = NAME a = ARRAY of INT),
  |   (a,
  |   | NAME a = ARRAY of INT)],
  | VarDec(arr1,true,NAME b = NAME a = ARRAY of INT,
  |   (NAME b = NAME a = ARRAY of INT, ArrayExp(
  |   |   (INT, IntExp(10)),
  |   |   (INT, IntExp(0)))))],
  | (INT, SeqExp[
  |   | (INT, VarExp(
  |   |   | SubscriptVar(
  |   |   |   SimpleVar(arr1, INT),
  |   |   |   (INT, IntExp(2)))))])))
1----- test30 -----
1,2c1,64
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CALL(
>               NAME initArray,
>               CONST 10,
>               CONST 0)),
>           MEM(
>             ESEQ(
>               SEQ(
>                 MOVE(
>                   TEMP t109,
>                   CONST 2),
>                 SEQ(
>                   MOVE(
>                     TEMP t110,
>                     MEM(
>                       BINOP(PLUS,
>                         FP,
>                         CONST ~4))),
>                   SEQ(
>                     MOVE(
>                       TEMP t111,
>                       BINOP(MUL,
>                         CONST 2,
>                         CONST 4)),
>                     SEQ(
>                       EXP(
>                         TEMP t112),
>                       SEQ(
>                         LABEL L1_subs_neg,
>                         SEQ(
>                           LABEL L2_subs_nneg,
>                           SEQ(
>                             LABEL L3_subs_ovf,
>                             LABEL L4_subs_novf))))))),
>               MEM(
>                 BINOP(PLUS,
>                   MEM(
>                     MEM(
>                       BINOP(PLUS,
>                         FP,
>                         CONST ~4))),
>                   BINOP(MUL,
>                     CONST 2,
>                     CONST 4))))))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(STRING, LetExp([
  | VarDec(a,true,INT,
  |   (INT, IntExp(0))),
  | VarDec(a,true,STRING,
  |   (STRING, StringExp(" ")))],
  | (STRING, SeqExp[
  |   | (STRING, VarExp(
  |   |   | SimpleVar(a, STRING)))])))
2----- test37 -----
1,2c1,35
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 2}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           SEQ(
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~4)),
>               CONST 0),
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~8)),
>               NAME L1_string)),
>           MEM(
>             BINOP(PLUS,
>               FP,
>               CONST ~8)))),
>       EXP(
>         CONST 0))))
> 
> STRING L1_string = " "
> 
> STRING L0_string = "DefaultString"
> 
(INT, LetExp([
  | TypeDec[
  |   (a,
  |   | NAME a = INT)]],
  | (INT, SeqExp[
  |   | (INT, LetExp([
  |   |   | TypeDec[
  |   |   |   (a,
  |   |   |   | NAME a = STRING)]],
  |   |   | (INT, SeqExp[
  |   |   |   | (INT, IntExp(0))])))])))
----- test41 -----
1,2c1,16
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CONST 0),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(UNIT, LetExp([
  | TypeDec[
  |   (arrtype3,
  |   | NAME arrtype3 = ARRAY of STRING),
  |   (rectype2,
  |   | NAME rectype2 = RECORD
  name: STRING
  dates: NAME arrtype1
END),
  |   (arrtype2,
  |   | NAME arrtype2 = ARRAY of NAME rectype1 = RECORD
  name: STRING
  address: STRING
  id: INT
  age: INT
END),
  |   (rectype1,
  |   | NAME rectype1 = RECORD
  name: STRING
  address: STRING
  id: INT
  age: INT
END),
  |   (arrtype1,
  |   | NAME arrtype1 = ARRAY of INT)],
  | VarDec(arr1,true,NAME arrtype1 = ARRAY of INT,
  |   (NAME arrtype1 = ARRAY of INT, ArrayExp(
  |   |   (INT, IntExp(10)),
  |   |   (INT, IntExp(0))))),
  | VarDec(arr2,true,NAME arrtype2 = ARRAY of NAME rectype1 = RECORD
  name: STRING
  address: STRING
  id: INT
  age: INT
END,
  |   (NAME arrtype2 = ARRAY of NAME rectype1 = RECORD
  name: STRING
  address: STRING
  id: INT
  age: INT
END, ArrayExp(
  |   |   (INT, IntExp(5)),
  |   |   (NAME rectype1 = RECORD
  name: STRING
  address: STRING
  id: INT
  age: INT
END, RecordExp([
  |   |   |   (name,
  |   |   |   | (STRING, StringExp("aname"))),
  |   |   |   (address,
  |   |   |   | (STRING, StringExp("somewhere"))),
  |   |   |   (id,
  |   |   |   | (INT, IntExp(0))),
  |   |   |   (age,
  |   |   |   | (INT, IntExp(0)))]))))),
  | VarDec(arr3,true,NAME arrtype3 = ARRAY of STRING,
  |   (NAME arrtype3 = ARRAY of STRING, ArrayExp(
  |   |   (INT, IntExp(100)),
  |   |   (STRING, StringExp(""))))),
  | VarDec(rec1,true,NAME rectype1 = RECORD
  name: STRING
  address: STRING
  id: INT
  age: INT
END,
  |   (NAME rectype1 = RECORD
  name: STRING
  address: STRING
  id: INT
  age: INT
END, RecordExp([
  |   |   (name,
  |   |   | (STRING, StringExp("Kapoios"))),
  |   |   (address,
  |   |   | (STRING, StringExp("Kapou"))),
  |   |   (id,
  |   |   | (INT, IntExp(2432))),
  |   |   (age,
  |   |   | (INT, IntExp(44)))]))),
  | VarDec(rec2,true,NAME rectype2 = RECORD
  name: STRING
  dates: NAME arrtype1
END,
  |   (NAME rectype2 = RECORD
  name: STRING
  dates: NAME arrtype1
END, RecordExp([
  |   |   (name,
  |   |   | (STRING, StringExp("Allos"))),
  |   |   (dates,
  |   |   | (NAME arrtype1 = ARRAY of INT, ArrayExp(
  |   |   |   | (INT, IntExp(3)),
  |   |   |   | (INT, IntExp(1900)))))])))],
  | (UNIT, SeqExp[
  |   | (UNIT, AssignExp(
  |   |   | SubscriptVar(
  |   |   |   SimpleVar(arr1, INT),
  |   |   |   (INT, IntExp(0))),
  |   |   | (INT, IntExp(1)))),
  |   | (UNIT, AssignExp(
  |   |   | SubscriptVar(
  |   |   |   SimpleVar(arr1, INT),
  |   |   |   (INT, IntExp(9))),
  |   |   | (INT, IntExp(3)))),
  |   | (UNIT, AssignExp(
  |   |   | FieldVar(
  |   |   |   SubscriptVar(
  |   |   |   | SimpleVar(arr2, RECORD
  name: STRING
  address: STRING
  id: INT
  age: INT
END),
  |   |   |   | (INT, IntExp(3))),
  |   |   |   name, STRING),
  |   |   | (STRING, StringExp("kati")))),
  |   | (UNIT, AssignExp(
  |   |   | FieldVar(
  |   |   |   SubscriptVar(
  |   |   |   | SimpleVar(arr2, RECORD
  name: STRING
  address: STRING
  id: INT
  age: INT
END),
  |   |   |   | (INT, IntExp(1))),
  |   |   |   age, INT),
  |   |   | (INT, IntExp(23)))),
  |   | (UNIT, AssignExp(
  |   |   | SubscriptVar(
  |   |   |   SimpleVar(arr3, STRING),
  |   |   |   (INT, IntExp(34))),
  |   |   | (STRING, StringExp("sfd")))),
  |   | (UNIT, AssignExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(rec1, RECORD
  name: STRING
  address: STRING
  id: INT
  age: INT
END),
  |   |   |   name, STRING),
  |   |   | (STRING, StringExp("sdf")))),
  |   | (UNIT, AssignExp(
  |   |   | SubscriptVar(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(rec2, RECORD
  name: STRING
  dates: NAME arrtype1
END),
  |   |   |   | dates, INT),
  |   |   |   (INT, IntExp(0))),
  |   |   | (INT, IntExp(2323)))),
  |   | (UNIT, AssignExp(
  |   |   | SubscriptVar(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(rec2, RECORD
  name: STRING
  dates: NAME arrtype1
END),
  |   |   |   | dates, INT),
  |   |   |   (INT, IntExp(2))),
  |   |   | (INT, IntExp(2323))))])))
5----- test42 -----
1,2c1,277
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 5}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         ESEQ(
>           SEQ(
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~4)),
>               CALL(
>                 NAME initArray,
>                 CONST 10,
>                 CONST 0)),
>             SEQ(
>               MOVE(
>                 MEM(
>                   BINOP(PLUS,
>                     FP,
>                     CONST ~8)),
>                 CALL(
>                   NAME initArray,
>                   CONST 5,
>                   CONST 0)),
>               SEQ(
>                 MOVE(
>                   MEM(
>                     BINOP(PLUS,
>                       FP,
>                       CONST ~12)),
>                   CALL(
>                     NAME initArray,
>                     CONST 100,
>                     NAME L1_string)),
>                 SEQ(
>                   MOVE(
>                     MEM(
>                       BINOP(PLUS,
>                         FP,
>                         CONST ~16)),
>                     CONST 0),
>                   MOVE(
>                     MEM(
>                       BINOP(PLUS,
>                         FP,
>                         CONST ~20)),
>                     CONST 0))))),
>           ESEQ(
>             SEQ(
>               MOVE(
>                 MEM(
>                   ESEQ(
>                     SEQ(
>                       MOVE(
>                         TEMP t109,
>                         CONST 0),
>                       SEQ(
>                         MOVE(
>                           TEMP t110,
>                           MEM(
>                             BINOP(PLUS,
>                               FP,
>                               CONST ~4))),
>                         SEQ(
>                           MOVE(
>                             TEMP t111,
>                             BINOP(MUL,
>                               CONST 0,
>                               CONST 4)),
>                           SEQ(
>                             EXP(
>                               TEMP t112),
>                             SEQ(
>                               LABEL L2_subs_neg,
>                               SEQ(
>                                 LABEL L3_subs_nneg,
>                                 SEQ(
>                                   LABEL L4_subs_ovf,
>                                   LABEL L5_subs_novf))))))),
>                     MEM(
>                       BINOP(PLUS,
>                         MEM(
>                           MEM(
>                             BINOP(PLUS,
>                               FP,
>                               CONST ~4))),
>                         BINOP(MUL,
>                           CONST 0,
>                           CONST 4))))),
>                 CONST 1),
>               SEQ(
>                 MOVE(
>                   MEM(
>                     ESEQ(
>                       SEQ(
>                         MOVE(
>                           TEMP t113,
>                           CONST 9),
>                         SEQ(
>                           MOVE(
>                             TEMP t114,
>                             MEM(
>                               BINOP(PLUS,
>                                 FP,
>                                 CONST ~4))),
>                           SEQ(
>                             MOVE(
>                               TEMP t115,
>                               BINOP(MUL,
>                                 CONST 9,
>                                 CONST 4)),
>                             SEQ(
>                               EXP(
>                                 TEMP t116),
>                               SEQ(
>                                 LABEL L6_subs_neg,
>                                 SEQ(
>                                   LABEL L7_subs_nneg,
>                                   SEQ(
>                                     LABEL L8_subs_ovf,
>                                     LABEL L9_subs_novf))))))),
>                       MEM(
>                         BINOP(PLUS,
>                           MEM(
>                             MEM(
>                               BINOP(PLUS,
>                                 FP,
>                                 CONST ~4))),
>                           BINOP(MUL,
>                             CONST 9,
>                             CONST 4))))),
>                   CONST 3),
>                 SEQ(
>                   MOVE(
>                     CONST 0,
>                     NAME L10_string),
>                   SEQ(
>                     MOVE(
>                       CONST 0,
>                       CONST 23),
>                     SEQ(
>                       MOVE(
>                         MEM(
>                           ESEQ(
>                             SEQ(
>                               MOVE(
>                                 TEMP t117,
>                                 CONST 34),
>                               SEQ(
>                                 MOVE(
>                                   TEMP t118,
>                                   MEM(
>                                     BINOP(PLUS,
>                                       FP,
>                                       CONST ~12))),
>                                 SEQ(
>                                   MOVE(
>                                     TEMP t119,
>                                     BINOP(MUL,
>                                       CONST 34,
>                                       CONST 4)),
>                                   SEQ(
>                                     EXP(
>                                       TEMP t120),
>                                     SEQ(
>                                       LABEL L11_subs_neg,
>                                       SEQ(
>                                         LABEL L12_subs_nneg,
>                                         SEQ(
>                                           LABEL L13_subs_ovf,
>                                           LABEL L14_subs_novf))))))),
>                             MEM(
>                               BINOP(PLUS,
>                                 MEM(
>                                   MEM(
>                                     BINOP(PLUS,
>                                       FP,
>                                       CONST ~12))),
>                                 BINOP(MUL,
>                                   CONST 34,
>                                   CONST 4))))),
>                         NAME L15_string),
>                       SEQ(
>                         MOVE(
>                           CONST 0,
>                           NAME L16_string),
>                         SEQ(
>                           MOVE(
>                             MEM(
>                               ESEQ(
>                                 SEQ(
>                                   MOVE(
>                                     TEMP t121,
>                                     CONST 0),
>                                   SEQ(
>                                     MOVE(
>                                       TEMP t122,
>                                       CONST 0),
>                                     SEQ(
>                                       MOVE(
>                                         TEMP t123,
>                                         BINOP(MUL,
>                                           CONST 0,
>                                           CONST 4)),
>                                       SEQ(
>                                         EXP(
>                                           TEMP t124),
>                                         SEQ(
>                                           LABEL L17_subs_neg,
>                                           SEQ(
>                                             LABEL L18_subs_nneg,
>                                             SEQ(
>                                               LABEL L19_subs_ovf,
>                                               LABEL L20_subs_novf))))))),
>                                 MEM(
>                                   BINOP(PLUS,
>                                     MEM(
>                                       CONST 0),
>                                     BINOP(MUL,
>                                       CONST 0,
>                                       CONST 4))))),
>                             CONST 2323),
>                           MOVE(
>                             MEM(
>                               ESEQ(
>                                 SEQ(
>                                   MOVE(
>                                     TEMP t125,
>                                     CONST 2),
>                                   SEQ(
>                                     MOVE(
>                                       TEMP t126,
>                                       CONST 0),
>                                     SEQ(
>                                       MOVE(
>                                         TEMP t127,
>                                         BINOP(MUL,
>                                           CONST 2,
>                                           CONST 4)),
>                                       SEQ(
>                                         EXP(
>                                           TEMP t128),
>                                         SEQ(
>                                           LABEL L21_subs_neg,
>                                           SEQ(
>                                             LABEL L22_subs_nneg,
>                                             SEQ(
>                                               LABEL L23_subs_ovf,
>                                               LABEL L24_subs_novf))))))),
>                                 MEM(
>                                   BINOP(PLUS,
>                                     MEM(
>                                       CONST 0),
>                                     BINOP(MUL,
>                                       CONST 2,
>                                       CONST 4))))),
>                             CONST 2323)))))))),
>             CONST 0))),
>       EXP(
>         CONST 0))))
> 
> STRING L16_string = "sdf"
> 
> STRING L15_string = "sfd"
> 
> STRING L10_string = "kati"
> 
> STRING L1_string = ""
> 
> STRING L0_string = "DefaultString"
> 
(UNIT, LetExp([
  | TypeDec[
  |   (rectype,
  |   | NAME rectype = RECORD
  name: STRING
  id: INT
END)],
  | VarDec(b,true,NIL,
  |   (NAME rectype = RECORD
  name: STRING
  id: INT
END, NilExp))],
  | (UNIT, SeqExp[
  |   | (UNIT, AssignExp(
  |   |   | SimpleVar(b, NIL),
  |   |   | (NIL, NilExp)))])))
1----- test44 -----
1,2c1,29
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CONST 0),
>           ESEQ(
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~4)),
>               CONST 0),
>             CONST 0))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, LetExp([
  | TypeDec[
  |   (rectype,
  |   | NAME rectype = RECORD
  name: STRING
  id: INT
END)],
  | VarDec(b,true,NIL,
  |   (NAME rectype = RECORD
  name: STRING
  id: INT
END, NilExp))],
  | (INT, SeqExp[
  |   | (INT, OpExp(EqOp,
  |   |   | (NIL, VarExp(
  |   |   |   | SimpleVar(b, NIL))),
  |   |   | (NIL, NilExp))),
  |   | (INT, OpExp(NeqOp,
  |   |   | (NIL, VarExp(
  |   |   |   | SimpleVar(b, NIL))),
  |   |   | (NIL, NilExp)))])))
----- test46 -----
(INT, LetExp([
  | TypeDec[
  |   (a,
  |   | NAME a = INT)],
  | VarDec(b,true,INT,
  |   (INT, IntExp(4))),
  | TypeDec[
  |   (a,
  |   | NAME a = STRING)]],
  | (INT, SeqExp[
  |   | (INT, IntExp(0))])))
1----- test47 -----
1,2c1,23
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CONST 4),
>           CONST 0)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, LetExp([
  | FunctionDec[
  |   (g,[
  |   | (a,true,INT)],
  |   | INT,
  |   | (INT, VarExp(
  |   |   | SimpleVar(a, INT))))],
  | TypeDec[
  |   (t,
  |   | NAME t = INT)],
  | FunctionDec[
  |   (g,[
  |   | (a,true,INT)],
  |   | INT,
  |   | (INT, VarExp(
  |   |   | SimpleVar(a, INT))))]],
  | (INT, SeqExp[
  |   | (INT, IntExp(0))])))
----- test48 -----
1,2c1,16
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CONST 0),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(RECORD
  age: INT
  name: STRING
END, LetExp([
  | TypeDec[
  |   (rectype,
  |   | NAME rectype = RECORD
  age: INT
  name: STRING
END)],
  | VarDec(rec1,true,NAME rectype = RECORD
  age: INT
  name: STRING
END,
  |   (NAME rectype = RECORD
  age: INT
  name: STRING
END, RecordExp([
  |   |   (age,
  |   |   | (INT, IntExp(1000))),
  |   |   (name,
  |   |   | (STRING, StringExp("Nobody")))])))],
  | (RECORD
  age: INT
  name: STRING
END, SeqExp[
  |   | (UNIT, AssignExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(rec1, RECORD
  age: INT
  name: STRING
END),
  |   |   |   name, STRING),
  |   |   | (STRING, StringExp("Somebody")))),
  |   | (RECORD
  age: INT
  name: STRING
END, VarExp(
  |   |   | SimpleVar(rec1, RECORD
  age: INT
  name: STRING
END)))])))
1----- test51 -----
1,2c1,32
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CONST 0),
>           ESEQ(
>             MOVE(
>               CONST 0,
>               NAME L1_string),
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4))))),
>       EXP(
>         CONST 0))))
> 
> STRING L1_string = "Somebody"
> 
> STRING L0_string = "DefaultString"
> 
(ARRAY of INT, LetExp([
  | TypeDec[
  |   (arrtype,
  |   | NAME arrtype = ARRAY of INT)],
  | VarDec(arr1,true,NAME arrtype = ARRAY of INT,
  |   (NAME arrtype = ARRAY of INT, ArrayExp(
  |   |   (INT, IntExp(10)),
  |   |   (INT, IntExp(1)))))],
  | (ARRAY of INT, SeqExp[
  |   | (ARRAY of INT, VarExp(
  |   |   | SimpleVar(arr1, ARRAY of INT)))])))
1----- test52 -----
1,2c1,29
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CALL(
>               NAME initArray,
>               CONST 10,
>               CONST 1)),
>           MEM(
>             BINOP(PLUS,
>               FP,
>               CONST ~4)))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, LetExp([
  | FunctionDec[
  |   (f,[
  |   | (n,true,INT)],
  |   | INT,
  |   | (INT, IntExp(42)))]],
  | (INT, SeqExp[
  |   | (INT, CallExp(f,[
  |   |   | (INT, IntExp(10))]))])))
----- test53 -----
1,2c1,16
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CONST 0),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, OpExp(PlusOp,
  | (INT, IntExp(2)),
  | (INT, IntExp(2))))
----- test54 -----
1,2c1,18
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         BINOP(PLUS,
>           CONST 2,
>           CONST 2)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, OpExp(TimesOp,
  | (INT, IntExp(3)),
  | (INT, IntExp(3))))
----- test55 -----
1,2c1,18
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         BINOP(MUL,
>           CONST 3,
>           CONST 3)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, OpExp(PlusOp,
  | (INT, OpExp(PlusOp,
  |   | (INT, IntExp(2)),
  |   | (INT, IntExp(3)))),
  | (INT, IntExp(4))))
----- test56 -----
1,2c1,20
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         BINOP(PLUS,
>           BINOP(PLUS,
>             CONST 2,
>             CONST 3),
>           CONST 4)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, LetExp([
  | FunctionDec[
  |   (f,[
  |   | (n,true,INT)],
  |   | INT,
  |   | (INT, IfExp(
  |   |   | (INT, OpExp(EqOp,
  |   |   |   | (INT, VarExp(
  |   |   |   |   | SimpleVar(n, INT))),
  |   |   |   | (INT, IntExp(0)))),
  |   |   | (INT, IntExp(1)),
  |   |   | (INT, IntExp(2)))))],
  | VarDec(f10,true,INT,
  |   (INT, CallExp(f,[
  |   |   (INT, IntExp(10))]))),
  | VarDec(f0,true,INT,
  |   (INT, CallExp(f,[
  |   |   (INT, IntExp(0))])))],
  | (INT, SeqExp[
  |   | (INT, OpExp(PlusOp,
  |   |   | (INT, VarExp(
  |   |   |   | SimpleVar(f10, INT))),
  |   |   | (INT, VarExp(
  |   |   |   | SimpleVar(f0, INT)))))])))
2----- test57 -----
1,2c1,38
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 2}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           SEQ(
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~4)),
>               CONST 0),
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~8)),
>               CONST 0)),
>           BINOP(PLUS,
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~8))))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(UNIT, CallExp(print,[
  | (STRING, StringExp("."))]))
----- test58 -----
1,2c1,15
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         CONST 0),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, LetExp([
  | VarDec(x,true,INT,
  |   (INT, IntExp(0))),
  | FunctionDec[
  |   (f,[],
  |   | UNIT,
  |   | (UNIT, SeqExp[
  |   |   | (UNIT, AssignExp(
  |   |   |   | SimpleVar(x, INT),
  |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(x, INT))),
  |   |   |   |   | (INT, IntExp(1))))))]))]],
  | (INT, SeqExp[
  |   | (UNIT, CallExp(f,[])),
  |   | (INT, VarExp(
  |   |   | SimpleVar(x, INT)))])))
1----- test59 -----
1,2c1,29
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             CONST 0),
>           ESEQ(
>             EXP(
>               CONST 0),
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4))))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, OpExp(NeqOp,
  | (STRING, StringExp("whatever")),
  | (STRING, StringExp("whateverelse"))))
----- test60 -----
1,2c1,23
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CALL(
>           NAME stringNotEq,
>           NAME L1_string,
>           NAME L2_string)),
>       EXP(
>         CONST 0))))
> 
> STRING L2_string = "whateverelse"
> 
> STRING L1_string = "whatever"
> 
> STRING L0_string = "DefaultString"
> 
(INT, LetExp([
  | VarDec(s,true,STRING,
  |   (STRING, StringExp("whatever")))],
  | (INT, SeqExp[
  |   | (INT, OpExp(GtOp,
  |   |   | (STRING, VarExp(
  |   |   |   | SimpleVar(s, STRING))),
  |   |   | (STRING, StringExp("else"))))])))
1----- test61 -----
1,2c1,33
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             NAME L1_string),
>           CALL(
>             NAME stringGreater,
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             NAME L2_string))),
>       EXP(
>         CONST 0))))
> 
> STRING L2_string = "else"
> 
> STRING L1_string = "whatever"
> 
> STRING L0_string = "DefaultString"
> 
(INT, LetExp([
  | VarDec(s,true,STRING,
  |   (STRING, StringExp("whatever"))),
  | FunctionDec[
  |   (compare,[],
  |   | INT,
  |   | (INT, OpExp(GtOp,
  |   |   | (STRING, VarExp(
  |   |   |   | SimpleVar(s, STRING))),
  |   |   | (STRING, StringExp("else")))))]],
  | (INT, SeqExp[
  |   | (INT, CallExp(compare,[]))])))
1----- test62 -----
1,2c1,25
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             NAME L1_string),
>           CONST 0)),
>       EXP(
>         CONST 0))))
> 
> STRING L1_string = "whatever"
> 
> STRING L0_string = "DefaultString"
> 
(INT, LetExp([
  | FunctionDec[
  |   (isdigit,[
  |   | (s,true,STRING)],
  |   | INT,
  |   | (INT, IfExp(
  |   |   | (INT, OpExp(GeOp,
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   | SimpleVar(s, STRING)))])),
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, StringExp("0"))])))),
  |   |   | (INT, OpExp(LeOp,
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   | SimpleVar(s, STRING)))])),
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, StringExp("9"))])))),
  |   |   | (INT, IntExp(0)))))]],
  | (INT, SeqExp[
  |   | (INT, CallExp(isdigit,[
  |   |   | (STRING, StringExp("1"))]))])))
----- test63 -----
1,2c1,16
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CONST 0),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, LetExp([
  | VarDec(buffer,true,STRING,
  |   (STRING, StringExp("5"))),
  | FunctionDec[
  |   (isdigit,[],
  |   | INT,
  |   | (INT, IfExp(
  |   |   | (INT, OpExp(GeOp,
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   | SimpleVar(buffer, STRING)))])),
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, StringExp("0"))])))),
  |   |   | (INT, OpExp(LeOp,
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   | SimpleVar(buffer, STRING)))])),
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, StringExp("9"))])))),
  |   |   | (INT, IntExp(0)))))]],
  | (INT, SeqExp[
  |   | (INT, CallExp(isdigit,[]))])))
1----- test64 -----
1,2c1,25
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             NAME L1_string),
>           CONST 0)),
>       EXP(
>         CONST 0))))
> 
> STRING L1_string = "5"
> 
> STRING L0_string = "DefaultString"
> 
(INT, OpExp(GeOp,
  | (INT, CallExp(ord,[
  |   | (STRING, StringExp("1"))])),
  | (INT, CallExp(ord,[
  |   | (STRING, StringExp("0"))]))))
----- test65 -----
1,2c1,33
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           SEQ(
>             MOVE(
>               TEMP t109,
>               CONST 1),
>             SEQ(
>               CJUMP(GE,
>                 CONST 0,
>                 CONST 0,
>                 L1_unEx_t,L2_unEx_f),
>               SEQ(
>                 LABEL L2_unEx_f,
>                 SEQ(
>                   MOVE(
>                     TEMP t109,
>                     CONST 0),
>                   LABEL L1_unEx_t)))),
>           TEMP t109)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, OpExp(GeOp,
  | (INT, IntExp(1)),
  | (INT, IntExp(0))))
----- test66 -----
1,2c1,33
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           SEQ(
>             MOVE(
>               TEMP t109,
>               CONST 1),
>             SEQ(
>               CJUMP(GE,
>                 CONST 1,
>                 CONST 0,
>                 L1_unEx_t,L2_unEx_f),
>               SEQ(
>                 LABEL L2_unEx_f,
>                 SEQ(
>                   MOVE(
>                     TEMP t109,
>                     CONST 0),
>                   LABEL L1_unEx_t)))),
>           TEMP t109)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, OpExp(LtOp,
  | (INT, IntExp(1)),
  | (INT, IntExp(2))))
----- test67 -----
1,2c1,33
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           SEQ(
>             MOVE(
>               TEMP t109,
>               CONST 1),
>             SEQ(
>               CJUMP(LT,
>                 CONST 1,
>                 CONST 2,
>                 L1_unEx_t,L2_unEx_f),
>               SEQ(
>                 LABEL L2_unEx_f,
>                 SEQ(
>                   MOVE(
>                     TEMP t109,
>                     CONST 0),
>                   LABEL L1_unEx_t)))),
>           TEMP t109)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(UNIT, LetExp([
  | VarDec(x,true,INT,
  |   (INT, IntExp(1))),
  | VarDec(y,true,INT,
  |   (INT, IntExp(2)))],
  | (UNIT, SeqExp[
  |   | (UNIT, AssignExp(
  |   |   | SimpleVar(x, INT),
  |   |   | (INT, VarExp(
  |   |   |   | SimpleVar(y, INT)))))])))
2----- test68 -----
1,2c1,39
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 2}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         ESEQ(
>           SEQ(
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~4)),
>               CONST 1),
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~8)),
>               CONST 2)),
>           ESEQ(
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~4)),
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~8))),
>             CONST 0))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, CallExp(ord,[
  | (STRING, StringExp("0"))]))
----- test69 -----
1,2c1,16
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CONST 0),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(STRING, SeqExp[
  | (INT, IntExp(0)),
  | (STRING, CallExp(getchar,[]))])
----- test70 -----
1,2c1,19
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           EXP(
>             CONST 0),
>           CONST 0)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, LetExp([
  | VarDec(x,true,STRING,
  |   (STRING, SeqExp[
  |   |   (INT, IntExp(0)),
  |   |   (STRING, CallExp(getchar,[]))]))],
  | (INT, SeqExp[
  |   | (INT, IntExp(0))])))
1----- test71 -----
1,2c1,26
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 1}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         ESEQ(
>           MOVE(
>             MEM(
>               BINOP(PLUS,
>                 FP,
>                 CONST ~4)),
>             ESEQ(
>               EXP(
>                 CONST 0),
>               CONST 0)),
>           CONST 0)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(UNIT, LetExp([
  | FunctionDec[
  |   (TstArith,[],
  |   | UNIT,
  |   | (UNIT, LetExp([
  |   |   | FunctionDec[
  |   |   |   (XX,[],
  |   |   |   | INT,
  |   |   |   | (INT, IntExp(999)))],
  |   |   | VarDec(a,true,INT,
  |   |   |   (INT, IntExp(5))),
  |   |   | VarDec(b,true,INT,
  |   |   |   (INT, IntExp(12))),
  |   |   | VarDec(c,true,INT,
  |   |   |   (INT, IntExp(2))),
  |   |   | VarDec(ch,true,STRING,
  |   |   |   (STRING, StringExp(" ")))],
  |   |   | (UNIT, SeqExp[
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   | (INT, IntExp(111)),
  |   |   |   |   |   | (INT, IntExp(222)))),
  |   |   |   |   | (INT, IntExp(333)),
  |   |   |   |   | (STRING, StringExp("a"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   | (INT, IntExp(111)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(116)),
  |   |   |   |   | (STRING, StringExp("b"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(b, INT))))),
  |   |   |   |   | (INT, IntExp(17)),
  |   |   |   |   | (STRING, StringExp("c"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(c, INT))))),
  |   |   |   |   | (INT, IntExp(19)),
  |   |   |   |   | (STRING, StringExp("d"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(b, INT))),
  |   |   |   |   |   | (INT, IntExp(222)))),
  |   |   |   |   | (INT, IntExp(234)),
  |   |   |   |   | (STRING, StringExp("e"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(c, INT)))))]))),
  |   |   |   |   | (INT, IntExp(19)),
  |   |   |   |   | (STRING, StringExp("f"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   | (INT, CallExp(XX,[])),
  |   |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   |   | (INT, IntExp(1000)),
  |   |   |   |   | (STRING, StringExp("g"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   | (INT, IntExp(2)),
  |   |   |   |   |   | (INT, CallExp(XX,[])))),
  |   |   |   |   | (INT, IntExp(1001)),
  |   |   |   |   | (STRING, StringExp("h"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   | (INT, CallExp(XX,[])),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(1004)),
  |   |   |   |   | (STRING, StringExp("i"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(b, INT))),
  |   |   |   |   |   | (INT, CallExp(XX,[])))),
  |   |   |   |   | (INT, IntExp(1011)),
  |   |   |   |   | (STRING, StringExp("j"))])),
  |   |   |   | (UNIT, CallExp(fill,[
  |   |   |   |   | (STRING, StringExp("k"))])),
  |   |   |   | (UNIT, CallExp(newl,[])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(111)),
  |   |   |   |   |   | (INT, IntExp(222)))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(111)))),
  |   |   |   |   | (STRING, StringExp("a"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(111)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(106)),
  |   |   |   |   | (STRING, StringExp("b"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(b, INT))))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(7)))),
  |   |   |   |   | (STRING, StringExp("c"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(c, INT))))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(9)))),
  |   |   |   |   | (STRING, StringExp("d"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(b, INT))),
  |   |   |   |   |   | (INT, IntExp(222)))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(210)))),
  |   |   |   |   | (STRING, StringExp("e"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(c, INT)))))]))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(5)))),
  |   |   |   |   | (STRING, StringExp("f"))])),
  |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   | (STRING, StringExp("ghij"))])),
  |   |   |   | (UNIT, CallExp(fill,[
  |   |   |   |   | (STRING, StringExp("k"))])),
  |   |   |   | (UNIT, CallExp(newl,[])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(3)))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(3)))),
  |   |   |   |   | (STRING, StringExp("a"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(5)))),
  |   |   |   |   | (STRING, StringExp("b"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(17)))),
  |   |   |   |   | (STRING, StringExp("c"))])),
  |   |   |   | (UNIT, IfExp(
  |   |   |   |   | (INT, OpExp(EqOp,
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(17)))))),
  |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   | (STRING, StringExp("d"))])),
  |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   | (STRING, StringExp("."))])))),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   | (INT, IntExp(900)))),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(b, INT),
  |   |   |   |   | (INT, IntExp(90)))),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(ch, STRING),
  |   |   |   |   | (STRING, CallExp(chr,[
  |   |   |   |   |   | (INT, IntExp(57))])))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]),
  |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(ch, STRING)))])))),
  |   |   |   |   | (INT, IntExp(1047)),
  |   |   |   |   | (STRING, StringExp("e"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]),
  |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(ch, STRING)))])))),
  |   |   |   |   | (INT, IntExp(933)),
  |   |   |   |   | (STRING, StringExp("f"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(ch, STRING)))])),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]))),
  |   |   |   |   | (INT, IntExp(1047)),
  |   |   |   |   | (STRING, StringExp("g"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(ch, STRING)))])),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(933)))),
  |   |   |   |   | (STRING, StringExp("h"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(ch, STRING),
  |   |   |   |   | (STRING, CallExp(chr,[
  |   |   |   |   |   | (INT, IntExp(10))])))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]),
  |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(ch, STRING)))])))),
  |   |   |   |   | (INT, IntExp(9900)),
  |   |   |   |   | (STRING, StringExp("i"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(ch, STRING)))])),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]))),
  |   |   |   |   | (INT, IntExp(9900)),
  |   |   |   |   | (STRING, StringExp("j"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(1000)),
  |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(ch, STRING)))])))),
  |   |   |   |   | (INT, IntExp(990)),
  |   |   |   |   | (STRING, StringExp("k"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(ch, STRING),
  |   |   |   |   | (STRING, CallExp(chr,[
  |   |   |   |   |   | (INT, IntExp(200))])))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(ch, STRING)))])),
  |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(ch, STRING)))])))),
  |   |   |   |   | (INT, IntExp(400)),
  |   |   |   |   | (STRING, StringExp("l"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   | (STRING, StringExp("a"))])),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(803)))),
  |   |   |   |   | (STRING, StringExp("m"))])),
  |   |   |   | (UNIT, CallExp(fill,[
  |   |   |   |   | (STRING, StringExp("n"))])),
  |   |   |   | (UNIT, CallExp(newl,[])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   | (INT, IntExp(5)))),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(b, INT),
  |   |   |   |   | (INT, IntExp(12)))),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(c, INT),
  |   |   |   |   | (INT, IntExp(2)))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(3)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(15)),
  |   |   |   |   | (STRING, StringExp("a"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(b, INT))))),
  |   |   |   |   | (INT, IntExp(60)),
  |   |   |   |   | (STRING, StringExp("b"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(b, INT))))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(c, INT))))),
  |   |   |   |   | (INT, IntExp(120)),
  |   |   |   |   | (STRING, StringExp("c"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(12)),
  |   |   |   |   |   | (INT, IntExp(6)))),
  |   |   |   |   | (INT, IntExp(72)),
  |   |   |   |   | (STRING, StringExp("d"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(3)))),
  |   |   |   |   | (INT, IntExp(15)),
  |   |   |   |   | (STRING, StringExp("e"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(3)),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]))),
  |   |   |   |   | (INT, IntExp(180)),
  |   |   |   |   | (STRING, StringExp("f"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]),
  |   |   |   |   |   | (INT, IntExp(3)))),
  |   |   |   |   | (INT, IntExp(180)),
  |   |   |   |   | (STRING, StringExp("g"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(c, INT)))))]))),
  |   |   |   |   | (INT, IntExp(120)),
  |   |   |   |   | (STRING, StringExp("h"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(c, INT))))),
  |   |   |   |   | (INT, IntExp(120)),
  |   |   |   |   | (STRING, StringExp("i"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(c, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(4))))]))),
  |   |   |   |   | (INT, IntExp(480)),
  |   |   |   |   | (STRING, StringExp("j"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, IntExp(1))))]))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(5)))),
  |   |   |   |   | (STRING, StringExp("k"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, IntExp(1))))]))),
  |   |   |   |   | (INT, IntExp(5)),
  |   |   |   |   | (STRING, StringExp("l"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, IntExp(2)))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(10)))),
  |   |   |   |   | (STRING, StringExp("m"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, IntExp(2))))]))),
  |   |   |   |   | (INT, IntExp(10)),
  |   |   |   |   | (STRING, StringExp("n"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, IntExp(4)))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(20)))),
  |   |   |   |   | (STRING, StringExp("o"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, IntExp(4))))]))),
  |   |   |   |   | (INT, IntExp(20)),
  |   |   |   |   | (STRING, StringExp("p"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, IntExp(256)))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(1280)))),
  |   |   |   |   | (STRING, StringExp("q"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, IntExp(256))))]))),
  |   |   |   |   | (INT, IntExp(1280)),
  |   |   |   |   | (STRING, StringExp("r"))])),
  |   |   |   | (UNIT, CallExp(fill,[
  |   |   |   |   | (STRING, StringExp("s"))])),
  |   |   |   | (UNIT, CallExp(newl,[])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(3)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(15)),
  |   |   |   |   | (STRING, StringExp("a"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(b, INT))))),
  |   |   |   |   | (INT, IntExp(60)),
  |   |   |   |   | (STRING, StringExp("b"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(b, INT))))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(c, INT))))),
  |   |   |   |   | (INT, IntExp(120)),
  |   |   |   |   | (STRING, StringExp("c"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(12)),
  |   |   |   |   |   | (INT, IntExp(6)))),
  |   |   |   |   | (INT, IntExp(72)),
  |   |   |   |   | (STRING, StringExp("d"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(3)))),
  |   |   |   |   | (INT, IntExp(15)),
  |   |   |   |   | (STRING, StringExp("e"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(3)),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]))),
  |   |   |   |   | (INT, IntExp(180)),
  |   |   |   |   | (STRING, StringExp("f"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]),
  |   |   |   |   |   | (INT, IntExp(3)))),
  |   |   |   |   | (INT, IntExp(180)),
  |   |   |   |   | (STRING, StringExp("g"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(c, INT)))))]))),
  |   |   |   |   | (INT, IntExp(120)),
  |   |   |   |   | (STRING, StringExp("h"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(c, INT))))),
  |   |   |   |   | (INT, IntExp(120)),
  |   |   |   |   | (STRING, StringExp("i"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(c, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(4))))]))),
  |   |   |   |   | (INT, IntExp(480)),
  |   |   |   |   | (STRING, StringExp("j"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   | (STRING, StringExp("k"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(5)),
  |   |   |   |   | (STRING, StringExp("l"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(2)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(10)),
  |   |   |   |   | (STRING, StringExp("m"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(3)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(15)),
  |   |   |   |   | (STRING, StringExp("n"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(4)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(20)),
  |   |   |   |   | (STRING, StringExp("o"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(5)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(25)),
  |   |   |   |   | (STRING, StringExp("p"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(6)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(30)),
  |   |   |   |   | (STRING, StringExp("q"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(7)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(35)),
  |   |   |   |   | (STRING, StringExp("r"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(8)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(40)),
  |   |   |   |   | (STRING, StringExp("s"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   | (STRING, StringExp("t"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   |   | (INT, IntExp(5)),
  |   |   |   |   | (STRING, StringExp("u"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(2)))),
  |   |   |   |   | (INT, IntExp(10)),
  |   |   |   |   | (STRING, StringExp("v"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(3)))),
  |   |   |   |   | (INT, IntExp(15)),
  |   |   |   |   | (STRING, StringExp("w"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(4)))),
  |   |   |   |   | (INT, IntExp(20)),
  |   |   |   |   | (STRING, StringExp("x"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(5)))),
  |   |   |   |   | (INT, IntExp(25)),
  |   |   |   |   | (STRING, StringExp("y"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(6)))),
  |   |   |   |   | (INT, IntExp(30)),
  |   |   |   |   | (STRING, StringExp("z"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(7)))),
  |   |   |   |   | (INT, IntExp(35)),
  |   |   |   |   | (STRING, StringExp("0"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(8)))),
  |   |   |   |   | (INT, IntExp(40)),
  |   |   |   |   | (STRING, StringExp("1"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(256)))),
  |   |   |   |   | (INT, IntExp(1280)),
  |   |   |   |   | (STRING, StringExp("2"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(65536)))),
  |   |   |   |   | (INT, IntExp(327680)),
  |   |   |   |   | (STRING, StringExp("3"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(16777216)))),
  |   |   |   |   | (INT, IntExp(83886080)),
  |   |   |   |   | (STRING, StringExp("4"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   | (INT, IntExp(13)),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   | (STRING, StringExp("5"))])),
  |   |   |   | (UNIT, CallExp(fill,[
  |   |   |   |   | (STRING, StringExp("6"))])),
  |   |   |   | (UNIT, CallExp(newl,[])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(3)))),
  |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   | (STRING, StringExp("a"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(b, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(2)),
  |   |   |   |   | (STRING, StringExp("b"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(b, INT))),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(2))))]))),
  |   |   |   |   | (INT, IntExp(6)),
  |   |   |   |   | (STRING, StringExp("c"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, CallExp(XX,[])),
  |   |   |   |   |   | (INT, IntExp(3)))),
  |   |   |   |   | (INT, IntExp(333)),
  |   |   |   |   | (STRING, StringExp("d"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, IntExp(1000)),
  |   |   |   |   |   | (INT, CallExp(XX,[])))),
  |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   | (STRING, StringExp("e"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, CallExp(XX,[])),
  |   |   |   |   |   | (INT, IntExp(888))])),
  |   |   |   |   | (INT, IntExp(111)),
  |   |   |   |   | (STRING, StringExp("f"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, IntExp(1002)),
  |   |   |   |   |   | (INT, CallExp(XX,[]))])),
  |   |   |   |   | (INT, IntExp(3)),
  |   |   |   |   | (STRING, StringExp("g"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, CallExp(XX,[])),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(199)),
  |   |   |   |   | (STRING, StringExp("h"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, CallExp(XX,[])),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT)))])),
  |   |   |   |   | (INT, IntExp(4)),
  |   |   |   |   | (STRING, StringExp("i"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]),
  |   |   |   |   |   | (INT, IntExp(3)))),
  |   |   |   |   | (INT, IntExp(5)),
  |   |   |   |   | (STRING, StringExp("j"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(b, INT))))),
  |   |   |   |   |   | (INT, IntExp(3))])),
  |   |   |   |   | (INT, IntExp(2)),
  |   |   |   |   | (STRING, StringExp("k"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   | (INT, IntExp(3)),
  |   |   |   |   | (STRING, StringExp("l"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(b, INT))))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT)))])),
  |   |   |   |   | (INT, IntExp(2)),
  |   |   |   |   | (STRING, StringExp("m"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))]),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(2))))]))),
  |   |   |   |   | (INT, IntExp(5)),
  |   |   |   |   | (STRING, StringExp("n"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(b, INT))))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, IntExp(2))))])),
  |   |   |   |   | (INT, IntExp(2)),
  |   |   |   |   | (STRING, StringExp("o"))])),
  |   |   |   | (UNIT, LetExp([
  |   |   |   |   | VarDec(d,true,INT,
  |   |   |   |   |   (INT, IntExp(100))),
  |   |   |   |   | VarDec(e,true,INT,
  |   |   |   |   |   (INT, IntExp(0)))],
  |   |   |   |   | (UNIT, SeqExp[
  |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   |   |   | (INT, IntExp(200)))),
  |   |   |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(d, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(4)))),
  |   |   |   |   |   |   | (INT, IntExp(25)),
  |   |   |   |   |   |   | (STRING, StringExp("p"))])),
  |   |   |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(8)))),
  |   |   |   |   |   |   | (INT, IntExp(25)),
  |   |   |   |   |   |   | (STRING, StringExp("q"))])),
  |   |   |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(d, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(16))])),
  |   |   |   |   |   |   | (INT, IntExp(4)),
  |   |   |   |   |   |   | (STRING, StringExp("r"))])),
  |   |   |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(128))])),
  |   |   |   |   |   |   | (INT, IntExp(72)),
  |   |   |   |   |   |   | (STRING, StringExp("s"))])),
  |   |   |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(d, INT)))))]),
  |   |   |   |   |   |   |   | (INT, IntExp(128)))),
  |   |   |   |   |   |   | (INT, IntExp(2)),
  |   |   |   |   |   |   | (STRING, StringExp("t"))])),
  |   |   |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(d, INT))))),
  |   |   |   |   |   |   |   | (INT, IntExp(128))])),
  |   |   |   |   |   |   | (INT, IntExp(44)),
  |   |   |   |   |   |   | (STRING, StringExp("u"))])),
  |   |   |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (STRING, StringExp("v"))])),
  |   |   |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(d, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(d, INT))),
  |   |   |   |   |   |   | (STRING, StringExp("w"))])),
  |   |   |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(1))])),
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (STRING, StringExp("x"))])),
  |   |   |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(d, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(1))])),
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (STRING, StringExp("y"))])),
  |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, IntExp(32)))))),
  |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   | SimpleVar(d, INT),
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, IntExp(1025)))))),
  |   |   |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(4)))),
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, IntExp(8)))),
  |   |   |   |   |   |   | (STRING, StringExp("z"))])),
  |   |   |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(d, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(8)))),
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, IntExp(128)))),
  |   |   |   |   |   |   | (STRING, StringExp("0"))])),
  |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   |   |   | (INT, IntExp(8)))),
  |   |   |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(d, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, IntExp(128)))),
  |   |   |   |   |   |   | (STRING, StringExp("1"))])),
  |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, IntExp(32)))))),
  |   |   |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(4)))),
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, IntExp(128)))),
  |   |   |   |   |   |   | (STRING, StringExp("2"))]))]))),
  |   |   |   | (UNIT, CallExp(fill,[
  |   |   |   |   | (STRING, StringExp("3"))])),
  |   |   |   | (UNIT, CallExp(newl,[])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   | (INT, IntExp(100)))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   |   | (INT, IntExp(100)),
  |   |   |   |   | (STRING, StringExp("a"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(2)))),
  |   |   |   |   | (INT, IntExp(50)),
  |   |   |   |   | (STRING, StringExp("b"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(3)))),
  |   |   |   |   | (INT, IntExp(33)),
  |   |   |   |   | (STRING, StringExp("c"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(4)))),
  |   |   |   |   | (INT, IntExp(25)),
  |   |   |   |   | (STRING, StringExp("d"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(5)))),
  |   |   |   |   | (INT, IntExp(20)),
  |   |   |   |   | (STRING, StringExp("e"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(6)))),
  |   |   |   |   | (INT, IntExp(16)),
  |   |   |   |   | (STRING, StringExp("f"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(7)))),
  |   |   |   |   | (INT, IntExp(14)),
  |   |   |   |   | (STRING, StringExp("g"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(8)))),
  |   |   |   |   | (INT, IntExp(12)),
  |   |   |   |   | (STRING, StringExp("h"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   | (INT, IntExp(83886080)))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(256)))),
  |   |   |   |   | (INT, IntExp(327680)),
  |   |   |   |   | (STRING, StringExp("i"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(65536)))),
  |   |   |   |   | (INT, IntExp(1280)),
  |   |   |   |   | (STRING, StringExp("j"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(16777216)))),
  |   |   |   |   | (INT, IntExp(5)),
  |   |   |   |   | (STRING, StringExp("k"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   | (INT, IntExp(101)))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(1))])),
  |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   | (STRING, StringExp("l"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(2))])),
  |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   | (STRING, StringExp("m"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(3))])),
  |   |   |   |   | (INT, IntExp(2)),
  |   |   |   |   | (STRING, StringExp("n"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(4))])),
  |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   | (STRING, StringExp("o"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(5))])),
  |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   | (STRING, StringExp("p"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(6))])),
  |   |   |   |   | (INT, IntExp(5)),
  |   |   |   |   | (STRING, StringExp("q"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(7))])),
  |   |   |   |   | (INT, IntExp(3)),
  |   |   |   |   | (STRING, StringExp("r"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(8))])),
  |   |   |   |   | (INT, IntExp(5)),
  |   |   |   |   | (STRING, StringExp("s"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   | (INT, IntExp(16777217)))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(256))])),
  |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   | (STRING, StringExp("t"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(65536))])),
  |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   | (STRING, StringExp("u"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, IntExp(16777216))])),
  |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   | (STRING, StringExp("v"))])),
  |   |   |   | (UNIT, CallExp(fill,[
  |   |   |   |   | (STRING, StringExp("w"))])),
  |   |   |   | (UNIT, CallExp(newl,[])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   | (INT, IntExp(100)))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(1)))))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(100)))),
  |   |   |   |   | (STRING, StringExp("a"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(2)))))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(50)))),
  |   |   |   |   | (STRING, StringExp("b"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(3)))))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(33)))),
  |   |   |   |   | (STRING, StringExp("c"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(4)))))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(25)))),
  |   |   |   |   | (STRING, StringExp("d"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(5)))))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(20)))),
  |   |   |   |   | (STRING, StringExp("e"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(6)))))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(16)))),
  |   |   |   |   | (STRING, StringExp("f"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(7)))))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(14)))),
  |   |   |   |   | (STRING, StringExp("g"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(8)))))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(12)))),
  |   |   |   |   | (STRING, StringExp("h"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   | (INT, IntExp(83886080)))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(256)))))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(327680)))),
  |   |   |   |   | (STRING, StringExp("i"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(65536)))))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(1280)))),
  |   |   |   |   | (STRING, StringExp("j"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(16777216)))))),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(5)))),
  |   |   |   |   | (STRING, StringExp("k"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   | (INT, IntExp(101)))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(1))))])),
  |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   | (STRING, StringExp("l"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(2))))])),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   |   | (STRING, StringExp("m"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(3))))])),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   |   | (STRING, StringExp("n"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(4))))])),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(3)))),
  |   |   |   |   | (STRING, StringExp("o"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(5))))])),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(4)))),
  |   |   |   |   | (STRING, StringExp("p"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(6))))])),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   |   | (STRING, StringExp("q"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(7))))])),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(4)))),
  |   |   |   |   | (STRING, StringExp("r"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(8))))])),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(3)))),
  |   |   |   |   | (STRING, StringExp("s"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   | (INT, IntExp(16777217)))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(256))))])),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(255)))),
  |   |   |   |   | (STRING, StringExp("t"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(65536))))])),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(65535)))),
  |   |   |   |   | (STRING, StringExp("u"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(16777216))))])),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(16777215)))),
  |   |   |   |   | (STRING, StringExp("v"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(16777216))))])),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   |   | (STRING, StringExp("w"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(65536))))])),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   |   | (STRING, StringExp("x"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   | (INT, IntExp(101)))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(8))))])),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, IntExp(5)))),
  |   |   |   |   | (STRING, StringExp("y"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(mod,[
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(1))))])),
  |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   | (STRING, StringExp("z"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   | (INT, IntExp(83886080)))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(256)))))),
  |   |   |   |   | (INT, IntExp(327680)),
  |   |   |   |   | (STRING, StringExp("0"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(65536)))))),
  |   |   |   |   | (INT, IntExp(1280)),
  |   |   |   |   | (STRING, StringExp("1"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(16777216)))))),
  |   |   |   |   | (INT, IntExp(5)),
  |   |   |   |   | (STRING, StringExp("2"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   | (INT, IntExp(100)))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(8)))))),
  |   |   |   |   | (INT, IntExp(12)),
  |   |   |   |   | (STRING, StringExp("3"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(2)))))),
  |   |   |   |   | (INT, IntExp(50)),
  |   |   |   |   | (STRING, StringExp("4"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   | (INT, IntExp(1)))))),
  |   |   |   |   | (INT, IntExp(100)),
  |   |   |   |   | (STRING, StringExp("5"))])),
  |   |   |   | (UNIT, CallExp(fill,[
  |   |   |   |   | (STRING, StringExp("6"))])),
  |   |   |   | (UNIT, CallExp(newl,[]))])))),
  |   (mod,[
  |   | (a,true,INT),
  |   | (b,true,INT)],
  |   | INT,
  |   | (INT, LetExp([
  |   |   | FunctionDec[
  |   |   |   (mod_neg,[
  |   |   |   | (a,true,INT),
  |   |   |   | (b,true,INT)],
  |   |   |   | INT,
  |   |   |   | (INT, SeqExp[
  |   |   |   |   | (UNIT, WhileExp(
  |   |   |   |   |   | (INT, OpExp(LtOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT))))))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(a, INT)))])),
  |   |   |   (mod_pos,[
  |   |   |   | (a,true,INT),
  |   |   |   | (b,true,INT)],
  |   |   |   | INT,
  |   |   |   | (INT, SeqExp[
  |   |   |   |   | (UNIT, WhileExp(
  |   |   |   |   |   | (INT, OpExp(GeOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(b, INT))))),
  |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT))))))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(a, INT)))]))]],
  |   |   | (INT, SeqExp[
  |   |   |   | (INT, IfExp(
  |   |   |   |   | (INT, OpExp(GtOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(b, INT))),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, OpExp(GeOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   | (INT, CallExp(mod_pos,[
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(b, INT)))])),
  |   |   |   |   |   | (INT, CallExp(mod_neg,[
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(b, INT)))])))),
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, OpExp(LtOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(b, INT))),
  |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   |   | (INT, OpExp(GeOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, CallExp(mod_neg,[
  |   |   |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))])))),
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, CallExp(mod_pos,[
  |   |   |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))])))))),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   |   |   | (STRING, StringExp("Error: mod (_,0) "))])),
  |   |   |   |   |   |   | (STRING, CallExp(chr,[
  |   |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   |   | (INT, IntExp(1))))])),
  |   |   |   |   |   |   | (INT, IntExp(0))])))))])))),
  |   (newl,[],
  |   | UNIT,
  |   | (UNIT, CallExp(print,[
  |   |   | (STRING, CallExp(chr,[
  |   |   |   | (INT, IntExp(10))]))]))),
  |   (fill,[
  |   | (first,true,STRING)],
  |   | UNIT,
  |   | (UNIT, SeqExp[
  |   |   | (UNIT, ForExp(i,true,
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, StringExp("a"))])),
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, StringExp("z"))])),
  |   |   |   | (UNIT, IfExp(
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   |   | (INT, OpExp(LeOp,
  |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   | (STRING, StringExp("a"))])),
  |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(first, STRING)))])))),
  |   |   |   |   |   |   | (INT, OpExp(LeOp,
  |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(first, STRING)))])),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(i, INT))))),
  |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   | (INT, OpExp(LeOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(i, INT))),
  |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   | (STRING, StringExp("z"))])))),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   | (STRING, CallExp(chr,[
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(i, INT)))]))])))))),
  |   |   | (UNIT, ForExp(i,true,
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, StringExp("0"))])),
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, StringExp("9"))])),
  |   |   |   | (UNIT, IfExp(
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   |   |   | (INT, OpExp(LeOp,
  |   |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   |   | (STRING, StringExp("0"))])),
  |   |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(first, STRING)))])))),
  |   |   |   |   |   |   |   | (INT, OpExp(LeOp,
  |   |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(first, STRING)))])),
  |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(i, INT))))),
  |   |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   |   | (INT, OpExp(LeOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(i, INT))),
  |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   | (STRING, StringExp("9"))])))),
  |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   |   | (INT, OpExp(LeOp,
  |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   | (STRING, StringExp("a"))])),
  |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(first, STRING)))])))))),
  |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   | (STRING, CallExp(chr,[
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(i, INT)))]))]))))))])),
  |   (chk,[
  |   | (a,true,INT),
  |   | (b,true,INT),
  |   | (msg,true,STRING)],
  |   | UNIT,
  |   | (UNIT, IfExp(
  |   |   | (INT, OpExp(EqOp,
  |   |   |   | (INT, VarExp(
  |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   | (INT, VarExp(
  |   |   |   |   | SimpleVar(b, INT))))),
  |   |   | (UNIT, CallExp(print,[
  |   |   |   | (STRING, VarExp(
  |   |   |   |   | SimpleVar(msg, STRING)))])),
  |   |   | (UNIT, CallExp(print,[
  |   |   |   | (STRING, StringExp("."))])))))]],
  | (UNIT, SeqExp[
  |   | (UNIT, CallExp(TstArith,[]))])))
----- test72 -----
1,2c1,15
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         CONST 0),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(UNIT, LetExp([
  | FunctionDec[
  |   (chk,[
  |   | (a,true,INT),
  |   | (b,true,INT),
  |   | (msg,true,STRING)],
  |   | UNIT,
  |   | (UNIT, IfExp(
  |   |   | (INT, OpExp(EqOp,
  |   |   |   | (INT, VarExp(
  |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   | (INT, VarExp(
  |   |   |   |   | SimpleVar(b, INT))))),
  |   |   | (UNIT, CallExp(print,[
  |   |   |   | (STRING, VarExp(
  |   |   |   |   | SimpleVar(msg, STRING)))])),
  |   |   | (UNIT, CallExp(print,[
  |   |   |   | (STRING, StringExp("."))])))))]],
  | (UNIT, SeqExp[
  |   | (UNIT, CallExp(chk,[
  |   |   | (INT, IntExp(1)),
  |   |   | (INT, IntExp(1)),
  |   |   | (STRING, StringExp("OK"))])),
  |   | (UNIT, CallExp(chk,[
  |   |   | (INT, IntExp(0)),
  |   |   | (INT, IntExp(1)),
  |   |   | (STRING, StringExp("Not OK"))]))])))
----- test73 -----
1,2c1,18
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       SEQ(
>         EXP(
>           CONST 0),
>         EXP(
>           CONST 0)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, OpExp(TimesOp,
  | (INT, IntExp(4)),
  | (INT, SeqExp[
  |   | (INT, OpExp(TimesOp,
  |   |   | (INT, IntExp(3)),
  |   |   | (INT, IntExp(2))))])))
----- test74 -----
1,2c1,20
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         BINOP(MUL,
>           CONST 4,
>           BINOP(MUL,
>             CONST 3,
>             CONST 2))),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(INT, LetExp([
  | FunctionDec[
  |   (mod,[
  |   | (a,true,INT),
  |   | (b,true,INT)],
  |   | INT,
  |   | (INT, LetExp([
  |   |   | FunctionDec[
  |   |   |   (mod_neg,[
  |   |   |   | (a,true,INT),
  |   |   |   | (b,true,INT)],
  |   |   |   | INT,
  |   |   |   | (INT, SeqExp[
  |   |   |   |   | (UNIT, WhileExp(
  |   |   |   |   |   | (INT, OpExp(LtOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT))))))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(a, INT)))])),
  |   |   |   (mod_pos,[
  |   |   |   | (a,true,INT),
  |   |   |   | (b,true,INT)],
  |   |   |   | INT,
  |   |   |   | (INT, SeqExp[
  |   |   |   |   | (UNIT, WhileExp(
  |   |   |   |   |   | (INT, OpExp(GeOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(b, INT))))),
  |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b, INT))))))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(a, INT)))]))]],
  |   |   | (INT, SeqExp[
  |   |   |   | (INT, IfExp(
  |   |   |   |   | (INT, OpExp(GtOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(b, INT))),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, OpExp(GeOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   | (INT, CallExp(mod_pos,[
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(b, INT)))])),
  |   |   |   |   |   | (INT, CallExp(mod_neg,[
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(b, INT)))])))),
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, OpExp(LtOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(b, INT))),
  |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   |   | (INT, OpExp(GeOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, CallExp(mod_neg,[
  |   |   |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))])))),
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, CallExp(mod_pos,[
  |   |   |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(a, INT))))),
  |   |   |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(b, INT)))))])))))),
  |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   |   |   | (STRING, StringExp("Error: mod (_,0) "))])),
  |   |   |   |   |   |   | (STRING, CallExp(chr,[
  |   |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   |   | (INT, IntExp(1))))])),
  |   |   |   |   |   |   | (INT, IntExp(0))])))))]))))]],
  | (INT, SeqExp[
  |   | (INT, CallExp(mod,[
  |   |   | (INT, OpExp(MinusOp,
  |   |   |   | (INT, IntExp(0)),
  |   |   |   | (INT, IntExp(5)))),
  |   |   | (INT, IntExp(3))]))])))
----- test75 -----
1,2c1,16
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 0}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       MOVE(
>         RV,
>         CONST 0),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(UNIT, LetExp([
  | TypeDec[
  |   (bool,
  |   | NAME bool = INT)],
  | VarDec(true,true,INT,
  |   (INT, IntExp(1))),
  | VarDec(false,true,INT,
  |   (INT, IntExp(0))),
  | FunctionDec[
  |   (TstBool,[],
  |   | UNIT,
  |   | (UNIT, LetExp([
  |   |   | VarDec(B1,true,INT,
  |   |   |   (INT, VarExp(
  |   |   |   |   SimpleVar(false, INT)))),
  |   |   | VarDec(B2,true,INT,
  |   |   |   (INT, VarExp(
  |   |   |   |   SimpleVar(false, INT)))),
  |   |   | VarDec(B3,true,INT,
  |   |   |   (INT, VarExp(
  |   |   |   |   SimpleVar(false, INT)))),
  |   |   | VarDec(a,true,INT,
  |   |   |   (INT, IntExp(0))),
  |   |   | VarDec(b,true,INT,
  |   |   |   (INT, IntExp(0))),
  |   |   | FunctionDec[
  |   |   |   (F,[
  |   |   |   | (b1,true,NAME bool = INT),
  |   |   |   | (b2,true,NAME bool = INT),
  |   |   |   | (ch,true,STRING)],
  |   |   |   | UNIT,
  |   |   |   | (UNIT, LetExp([
  |   |   |   |   | VarDec(R1,true,INT,
  |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   SimpleVar(false, INT)))),
  |   |   |   |   | VarDec(bo1,true,INT,
  |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   SimpleVar(false, INT)))),
  |   |   |   |   | VarDec(bo2,true,INT,
  |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   SimpleVar(false, INT)))),
  |   |   |   |   | FunctionDec[
  |   |   |   |   |   (FF,[
  |   |   |   |   |   | (b,true,NAME bool = INT)],
  |   |   |   |   |   | NAME bool = INT,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(b, INT))))]],
  |   |   |   |   | (UNIT, SeqExp[
  |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   | SimpleVar(R1, INT),
  |   |   |   |   |   |   | (NAME bool = INT, IfExp(
  |   |   |   |   |   |   |   | (NAME bool = INT, CallExp(FF,[
  |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(b1, INT)))])),
  |   |   |   |   |   |   |   | (NAME bool = INT, CallExp(FF,[
  |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(b2, INT)))])),
  |   |   |   |   |   |   |   | (INT, IntExp(0)))))),
  |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   | SimpleVar(bo1, INT),
  |   |   |   |   |   |   | (NAME bool = INT, CallExp(FF,[
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b1, INT)))])))),
  |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   | SimpleVar(bo2, INT),
  |   |   |   |   |   |   | (NAME bool = INT, CallExp(FF,[
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(b2, INT)))])))),
  |   |   |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(R1, INT))),
  |   |   |   |   |   |   | (INT, SeqExp[
  |   |   |   |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(bo1, INT))),
  |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(bo2, INT))),
  |   |   |   |   |   |   |   |   | (INT, IntExp(0))))]),
  |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(ch, STRING)))]))])))),
  |   |   |   (Q,[],
  |   |   |   | NAME bool = INT,
  |   |   |   | (INT, SeqExp[
  |   |   |   |   | (INT, OpExp(EqOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(b, INT)))))])),
  |   |   |   (XF,[],
  |   |   |   | NAME bool = INT,
  |   |   |   | (INT, VarExp(
  |   |   |   |   | SimpleVar(false, INT)))),
  |   |   |   (XT,[],
  |   |   |   | NAME bool = INT,
  |   |   |   | (INT, VarExp(
  |   |   |   |   | SimpleVar(true, INT))))]],
  |   |   | (UNIT, SeqExp[
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(B1, INT),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))))),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(B2, INT),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))))),
  |   |   |   | (UNIT, IfExp(
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(B1, INT))),
  |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   | (STRING, StringExp("."))])),
  |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   | (STRING, StringExp("a"))])))),
  |   |   |   | (UNIT, IfExp(
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(B2, INT))),
  |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   | (STRING, StringExp("b"))])),
  |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   | (STRING, StringExp("."))])))),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(B3, INT),
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B1, INT))),
  |   |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B2, INT))))))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(B3, INT))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("c"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(B3, INT),
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B1, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B2, INT))),
  |   |   |   |   |   | (INT, IntExp(0)))))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(B3, INT))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   | (STRING, StringExp("d"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(B3, INT),
  |   |   |   |   | (INT, CallExp(not,[
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B2, INT)))])))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(B3, INT))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   | (STRING, StringExp("e"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   |   | (NAME bool = INT, CallExp(XT,[])))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("f"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (NAME bool = INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   |   | (NAME bool = INT, CallExp(XT,[])),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("g"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (NAME bool = INT, CallExp(XT,[])),
  |   |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(false, INT))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("h"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (NAME bool = INT, CallExp(XT,[])),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("i"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B1, INT))),
  |   |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   |   | (NAME bool = INT, CallExp(XT,[])))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("j"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (NAME bool = INT, CallExp(XT,[])),
  |   |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B1, INT))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("k"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (NAME bool = INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B2, INT))),
  |   |   |   |   |   | (NAME bool = INT, CallExp(XT,[])),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("l"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (NAME bool = INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B1, INT))),
  |   |   |   |   |   | (NAME bool = INT, CallExp(XT,[])),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   | (STRING, StringExp("m"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(a, INT),
  |   |   |   |   | (INT, IntExp(111)))),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(b, INT),
  |   |   |   |   | (INT, IntExp(222)))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(not,[
  |   |   |   |   |   | (INT, OpExp(EqOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(b, INT)))))])),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("n"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(not,[
  |   |   |   |   |   | (NAME bool = INT, CallExp(Q,[]))])),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("o"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, CallExp(not,[
  |   |   |   |   |   | (NAME bool = INT, CallExp(XT,[]))])),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   | (STRING, StringExp("p"))])),
  |   |   |   | (UNIT, CallExp(F,[
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("q"))])),
  |   |   |   | (UNIT, CallExp(F,[
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   | (STRING, StringExp("r"))])),
  |   |   |   | (UNIT, CallExp(F,[
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("s"))])),
  |   |   |   | (UNIT, CallExp(F,[
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   | (STRING, StringExp("t"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(NeqOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(false, INT))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   | (STRING, StringExp("u"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(NeqOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(true, INT))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("v"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(B1, INT),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(NeqOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B1, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(true, INT))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("w"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(NeqOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B1, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(false, INT))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   | (STRING, StringExp("x"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(B1, INT),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(NeqOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B1, INT))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("y"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, OpExp(NeqOp,
  |   |   |   |   |   | (NAME bool = INT, CallExp(XF,[])),
  |   |   |   |   |   | (ERROR, ErrorExp))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("z"))])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(B1, INT),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))))),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | SimpleVar(B2, INT),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))))),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B1, INT))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("0"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B2, INT))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   | (STRING, StringExp("1"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(false, INT))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   | (STRING, StringExp("2"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(true, INT))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("3"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B1, INT))))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("4"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B1, INT))),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   | (STRING, StringExp("5"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B1, INT))),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("6"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(B2, INT))),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   | (STRING, StringExp("7"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(false, INT))),
  |   |   |   |   | (STRING, StringExp("8"))])),
  |   |   |   | (UNIT, CallExp(chk,[
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(true, INT))),
  |   |   |   |   | (STRING, StringExp("9"))]))])))),
  |   (newl,[],
  |   | UNIT,
  |   | (UNIT, CallExp(print,[
  |   |   | (STRING, CallExp(chr,[
  |   |   |   | (INT, IntExp(10))]))]))),
  |   (fill,[
  |   | (first,true,STRING)],
  |   | UNIT,
  |   | (UNIT, SeqExp[
  |   |   | (UNIT, ForExp(i,true,
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, StringExp("a"))])),
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, StringExp("z"))])),
  |   |   |   | (UNIT, IfExp(
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   |   | (INT, OpExp(LeOp,
  |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   | (STRING, StringExp("a"))])),
  |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(first, STRING)))])))),
  |   |   |   |   |   |   | (INT, OpExp(LeOp,
  |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(first, STRING)))])),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(i, INT))))),
  |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   | (INT, OpExp(LeOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(i, INT))),
  |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   | (STRING, StringExp("z"))])))),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   | (STRING, CallExp(chr,[
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(i, INT)))]))])))))),
  |   |   | (UNIT, ForExp(i,true,
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, StringExp("0"))])),
  |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   | (STRING, StringExp("9"))])),
  |   |   |   | (UNIT, IfExp(
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   |   |   | (INT, OpExp(LeOp,
  |   |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   |   | (STRING, StringExp("0"))])),
  |   |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(first, STRING)))])))),
  |   |   |   |   |   |   |   | (INT, OpExp(LeOp,
  |   |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(first, STRING)))])),
  |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(i, INT))))),
  |   |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   |   | (INT, OpExp(LeOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(i, INT))),
  |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   | (STRING, StringExp("9"))])))),
  |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   |   | (INT, OpExp(LeOp,
  |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   | (STRING, StringExp("a"))])),
  |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(first, STRING)))])))))),
  |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   | (STRING, CallExp(chr,[
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(i, INT)))]))]))))))])),
  |   (chk,[
  |   | (a,true,NAME bool = INT),
  |   | (b,true,NAME bool = INT),
  |   | (msg,true,STRING)],
  |   | UNIT,
  |   | (UNIT, IfExp(
  |   |   | (INT, OpExp(EqOp,
  |   |   |   | (INT, VarExp(
  |   |   |   |   | SimpleVar(a, INT))),
  |   |   |   | (INT, VarExp(
  |   |   |   |   | SimpleVar(b, INT))))),
  |   |   | (UNIT, CallExp(print,[
  |   |   |   | (STRING, VarExp(
  |   |   |   |   | SimpleVar(msg, STRING)))])),
  |   |   | (UNIT, CallExp(print,[
  |   |   |   | (STRING, StringExp("."))])))))]],
  | (UNIT, SeqExp[
  |   | (UNIT, CallExp(TstBool,[]))])))
2----- test76 -----
1,2c1,29
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 2}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         ESEQ(
>           SEQ(
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~4)),
>               CONST 1),
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~8)),
>               CONST 0)),
>           CONST 0)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(UNIT, LetExp([
  | TypeDec[
  |   (any,
  |   | NAME any = RECORD
  any: INT
END)],
  | VarDec(buffer,true,STRING,
  |   (STRING, CallExp(getchar,[]))),
  | FunctionDec[
  |   (readint,[
  |   | (any,true,NAME any = RECORD
  any: INT
END)],
  |   | INT,
  |   | (INT, LetExp([
  |   |   | VarDec(i,true,INT,
  |   |   |   (INT, IntExp(0))),
  |   |   | FunctionDec[
  |   |   |   (skipto,[],
  |   |   |   | UNIT,
  |   |   |   | (UNIT, WhileExp(
  |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   | (INT, OpExp(EqOp,
  |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(buffer, STRING))),
  |   |   |   |   |   |   | (STRING, StringExp(" ")))),
  |   |   |   |   |   | (INT, IntExp(1)),
  |   |   |   |   |   | (INT, OpExp(EqOp,
  |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(buffer, STRING))),
  |   |   |   |   |   |   | (STRING, StringExp("\\n")))))),
  |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   | SimpleVar(buffer, STRING),
  |   |   |   |   |   | (STRING, CallExp(getchar,[]))))))),
  |   |   |   (isdigit,[
  |   |   |   | (s,true,STRING)],
  |   |   |   | INT,
  |   |   |   | (INT, IfExp(
  |   |   |   |   | (INT, OpExp(GeOp,
  |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(buffer, STRING)))])),
  |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   | (STRING, StringExp("0"))])))),
  |   |   |   |   | (INT, OpExp(LeOp,
  |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(buffer, STRING)))])),
  |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   | (STRING, StringExp("9"))])))),
  |   |   |   |   | (INT, IntExp(0)))))]],
  |   |   | (INT, SeqExp[
  |   |   |   | (UNIT, CallExp(skipto,[])),
  |   |   |   | (UNIT, AssignExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(any, RECORD
  any: INT
END),
  |   |   |   |   |   any, INT),
  |   |   |   |   | (INT, CallExp(isdigit,[
  |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   | SimpleVar(buffer, STRING)))])))),
  |   |   |   | (UNIT, WhileExp(
  |   |   |   |   | (INT, CallExp(isdigit,[
  |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   | SimpleVar(buffer, STRING)))])),
  |   |   |   |   | (UNIT, SeqExp[
  |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   | SimpleVar(i, INT),
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(i, INT))),
  |   |   |   |   |   |   |   |   |   | (INT, IntExp(10)))),
  |   |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   |   | (STRING, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(buffer, STRING)))])))),
  |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   | (STRING, StringExp("0"))])))))),
  |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   | SimpleVar(buffer, STRING),
  |   |   |   |   |   |   | (STRING, CallExp(getchar,[]))))]))),
  |   |   |   | (INT, VarExp(
  |   |   |   |   | SimpleVar(i, INT)))]))))],
  | TypeDec[
  |   (list,
  |   | NAME list = RECORD
  first: INT
  rest: NAME list
END)],
  | FunctionDec[
  |   (printlist,[
  |   | (l,true,NAME list = RECORD
  first: INT
  rest: NAME list
END)],
  |   | UNIT,
  |   | (UNIT, IfExp(
  |   |   | (INT, OpExp(EqOp,
  |   |   |   | (RECORD
  first: INT
  rest: NAME list
END, VarExp(
  |   |   |   |   | SimpleVar(l, RECORD
  first: INT
  rest: NAME list
END))),
  |   |   |   | (NIL, NilExp))),
  |   |   | (UNIT, CallExp(print,[
  |   |   |   | (STRING, StringExp("\\n"))])),
  |   |   | (UNIT, SeqExp[
  |   |   |   | (UNIT, CallExp(printint,[
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(l, RECORD
  first: INT
  rest: NAME list
END),
  |   |   |   |   |   |   first, INT)))])),
  |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   | (STRING, StringExp(" "))])),
  |   |   |   | (UNIT, CallExp(printlist,[
  |   |   |   |   | (RECORD
  first: INT
  rest: NAME list
END, VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(l, RECORD
  first: INT
  rest: NAME list
END),
  |   |   |   |   |   |   rest, NAME list = RECORD
  first: INT
  rest: NAME list
END)))]))])))),
  |   (printint,[
  |   | (i,true,INT)],
  |   | UNIT,
  |   | (UNIT, LetExp([
  |   |   | FunctionDec[
  |   |   |   (f,[
  |   |   |   | (i,true,INT)],
  |   |   |   | UNIT,
  |   |   |   | (UNIT, IfExp(
  |   |   |   |   | (INT, OpExp(GtOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(i, INT))),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (UNIT, SeqExp[
  |   |   |   |   |   | (UNIT, CallExp(f,[
  |   |   |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(i, INT))),
  |   |   |   |   |   |   |   | (INT, IntExp(10))))])),
  |   |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   |   | (STRING, CallExp(chr,[
  |   |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(i, INT))),
  |   |   |   |   |   |   |   |   |   | (INT, OpExp(TimesOp,
  |   |   |   |   |   |   |   |   |   |   | (INT, OpExp(DivideOp,
  |   |   |   |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(i, INT))),
  |   |   |   |   |   |   |   |   |   |   |   | (INT, IntExp(10)))),
  |   |   |   |   |   |   |   |   |   |   | (INT, IntExp(10)))))),
  |   |   |   |   |   |   |   |   | (INT, CallExp(ord,[
  |   |   |   |   |   |   |   |   |   | (STRING, StringExp("0"))]))))]))]))]))))]],
  |   |   | (UNIT, SeqExp[
  |   |   |   | (UNIT, IfExp(
  |   |   |   |   | (INT, OpExp(LtOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(i, INT))),
  |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   | (UNIT, SeqExp[
  |   |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   |   | (STRING, StringExp("-"))])),
  |   |   |   |   |   | (UNIT, CallExp(f,[
  |   |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(i, INT)))))]))]),
  |   |   |   |   | (UNIT, IfExp(
  |   |   |   |   |   | (INT, OpExp(GtOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(i, INT))),
  |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   | (UNIT, CallExp(f,[
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(i, INT)))])),
  |   |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   |   | (STRING, StringExp("0"))]))))))])))),
  |   (merge,[
  |   | (a,true,NAME list = RECORD
  first: INT
  rest: NAME list
END),
  |   | (b,true,NAME list = RECORD
  first: INT
  rest: NAME list
END)],
  |   | NAME list = RECORD
  first: INT
  rest: NAME list
END,
  |   | (RECORD
  first: INT
  rest: NAME list
END, IfExp(
  |   |   | (INT, OpExp(EqOp,
  |   |   |   | (RECORD
  first: INT
  rest: NAME list
END, VarExp(
  |   |   |   |   | SimpleVar(a, RECORD
  first: INT
  rest: NAME list
END))),
  |   |   |   | (NIL, NilExp))),
  |   |   | (RECORD
  first: INT
  rest: NAME list
END, VarExp(
  |   |   |   | SimpleVar(b, RECORD
  first: INT
  rest: NAME list
END))),
  |   |   | (RECORD
  first: INT
  rest: NAME list
END, IfExp(
  |   |   |   | (INT, OpExp(EqOp,
  |   |   |   |   | (RECORD
  first: INT
  rest: NAME list
END, VarExp(
  |   |   |   |   |   | SimpleVar(b, RECORD
  first: INT
  rest: NAME list
END))),
  |   |   |   |   | (NIL, NilExp))),
  |   |   |   | (RECORD
  first: INT
  rest: NAME list
END, VarExp(
  |   |   |   |   | SimpleVar(a, RECORD
  first: INT
  rest: NAME list
END))),
  |   |   |   | (NAME list = RECORD
  first: INT
  rest: NAME list
END, IfExp(
  |   |   |   |   | (INT, OpExp(LtOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(a, RECORD
  first: INT
  rest: NAME list
END),
  |   |   |   |   |   |   |   first, INT))),
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(b, RECORD
  first: INT
  rest: NAME list
END),
  |   |   |   |   |   |   |   first, INT))))),
  |   |   |   |   | (NAME list = RECORD
  first: INT
  rest: NAME list
END, RecordExp([
  |   |   |   |   |   | (first,
  |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(a, RECORD
  first: INT
  rest: NAME list
END),
  |   |   |   |   |   |   |   | first, INT)))),
  |   |   |   |   |   | (rest,
  |   |   |   |   |   |   (NAME list = RECORD
  first: INT
  rest: NAME list
END, CallExp(merge,[
  |   |   |   |   |   |   |   (RECORD
  first: INT
  rest: NAME list
END, VarExp(
  |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   | SimpleVar(a, RECORD
  first: INT
  rest: NAME list
END),
  |   |   |   |   |   |   |   |   | rest, NAME list = RECORD
  first: INT
  rest: NAME list
END))),
  |   |   |   |   |   |   |   (RECORD
  first: INT
  rest: NAME list
END, VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(b, RECORD
  first: INT
  rest: NAME list
END)))])))])),
  |   |   |   |   | (NAME list = RECORD
  first: INT
  rest: NAME list
END, RecordExp([
  |   |   |   |   |   | (first,
  |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(b, RECORD
  first: INT
  rest: NAME list
END),
  |   |   |   |   |   |   |   | first, INT)))),
  |   |   |   |   |   | (rest,
  |   |   |   |   |   |   (NAME list = RECORD
  first: INT
  rest: NAME list
END, CallExp(merge,[
  |   |   |   |   |   |   |   (RECORD
  first: INT
  rest: NAME list
END, VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(a, RECORD
  first: INT
  rest: NAME list
END))),
  |   |   |   |   |   |   |   (RECORD
  first: INT
  rest: NAME list
END, VarExp(
  |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   | SimpleVar(b, RECORD
  first: INT
  rest: NAME list
END),
  |   |   |   |   |   |   |   |   | rest, NAME list = RECORD
  first: INT
  rest: NAME list
END)))])))]))))))))),
  |   (readlist,[],
  |   | NAME list = RECORD
  first: INT
  rest: NAME list
END,
  |   | (NAME list = RECORD
  first: INT
  rest: NAME list
END, LetExp([
  |   |   | VarDec(any,true,NAME any = RECORD
  any: INT
END,
  |   |   |   (NAME any = RECORD
  any: INT
END, RecordExp([
  |   |   |   |   (any,
  |   |   |   |   | (INT, IntExp(0)))]))),
  |   |   | VarDec(i,true,INT,
  |   |   |   (INT, CallExp(readint,[
  |   |   |   |   (RECORD
  any: INT
END, VarExp(
  |   |   |   |   |   SimpleVar(any, RECORD
  any: INT
END)))])))],
  |   |   | (NAME list = RECORD
  first: INT
  rest: NAME list
END, SeqExp[
  |   |   |   | (NAME list = RECORD
  first: INT
  rest: NAME list
END, IfExp(
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(any, RECORD
  any: INT
END),
  |   |   |   |   |   |   any, INT))),
  |   |   |   |   | (NAME list = RECORD
  first: INT
  rest: NAME list
END, RecordExp([
  |   |   |   |   |   | (first,
  |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   SimpleVar(i, INT)))),
  |   |   |   |   |   | (rest,
  |   |   |   |   |   |   (NAME list = RECORD
  first: INT
  rest: NAME list
END, CallExp(readlist,[])))])),
  |   |   |   |   | (NIL, NilExp)))]))))],
  | VarDec(list1,true,NAME list = RECORD
  first: INT
  rest: NAME list
END,
  |   (NAME list = RECORD
  first: INT
  rest: NAME list
END, CallExp(readlist,[]))),
  | VarDec(list2,true,NAME list = RECORD
  first: INT
  rest: NAME list
END,
  |   (NAME list = RECORD
  first: INT
  rest: NAME list
END, SeqExp[
  |   |   (UNIT, AssignExp(
  |   |   |   SimpleVar(buffer, STRING),
  |   |   |   (STRING, CallExp(getchar,[])))),
  |   |   (NAME list = RECORD
  first: INT
  rest: NAME list
END, CallExp(readlist,[]))]))],
  | (UNIT, SeqExp[
  |   | (UNIT, CallExp(printlist,[
  |   |   | (NAME list = RECORD
  first: INT
  rest: NAME list
END, CallExp(merge,[
  |   |   |   | (RECORD
  first: INT
  rest: NAME list
END, VarExp(
  |   |   |   |   | SimpleVar(list1, RECORD
  first: INT
  rest: NAME list
END))),
  |   |   |   | (RECORD
  first: INT
  rest: NAME list
END, VarExp(
  |   |   |   |   | SimpleVar(list2, RECORD
  first: INT
  rest: NAME list
END)))]))]))])))
3----- merge -----
1,2c1,43
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 3}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         ESEQ(
>           SEQ(
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~4)),
>               CONST 0),
>             SEQ(
>               MOVE(
>                 MEM(
>                   BINOP(PLUS,
>                     FP,
>                     CONST ~8)),
>                 CONST 0),
>               MOVE(
>                 MEM(
>                   BINOP(PLUS,
>                     FP,
>                     CONST ~12)),
>                 ESEQ(
>                   MOVE(
>                     MEM(
>                       BINOP(PLUS,
>                         FP,
>                         CONST ~4)),
>                     CONST 0),
>                   CONST 0)))),
>           CONST 0)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
(UNIT, LetExp([
  | VarDec(N,true,INT,
  |   (INT, IntExp(8))),
  | TypeDec[
  |   (intArray,
  |   | NAME intArray = ARRAY of INT)],
  | VarDec(row,true,NAME intArray = ARRAY of INT,
  |   (NAME intArray = ARRAY of INT, ArrayExp(
  |   |   (INT, VarExp(
  |   |   |   SimpleVar(N, INT))),
  |   |   (INT, IntExp(0))))),
  | VarDec(col,true,NAME intArray = ARRAY of INT,
  |   (NAME intArray = ARRAY of INT, ArrayExp(
  |   |   (INT, VarExp(
  |   |   |   SimpleVar(N, INT))),
  |   |   (INT, IntExp(0))))),
  | VarDec(diag1,true,NAME intArray = ARRAY of INT,
  |   (NAME intArray = ARRAY of INT, ArrayExp(
  |   |   (INT, OpExp(MinusOp,
  |   |   |   (INT, OpExp(PlusOp,
  |   |   |   |   (INT, VarExp(
  |   |   |   |   |   SimpleVar(N, INT))),
  |   |   |   |   (INT, VarExp(
  |   |   |   |   |   SimpleVar(N, INT))))),
  |   |   |   (INT, IntExp(1)))),
  |   |   (INT, IntExp(0))))),
  | VarDec(diag2,true,NAME intArray = ARRAY of INT,
  |   (NAME intArray = ARRAY of INT, ArrayExp(
  |   |   (INT, OpExp(MinusOp,
  |   |   |   (INT, OpExp(PlusOp,
  |   |   |   |   (INT, VarExp(
  |   |   |   |   |   SimpleVar(N, INT))),
  |   |   |   |   (INT, VarExp(
  |   |   |   |   |   SimpleVar(N, INT))))),
  |   |   |   (INT, IntExp(1)))),
  |   |   (INT, IntExp(0))))),
  | FunctionDec[
  |   (try,[
  |   | (c,true,INT)],
  |   | UNIT,
  |   | (UNIT, SeqExp[
  |   |   | (UNIT, IfExp(
  |   |   |   | (INT, OpExp(EqOp,
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(c, INT))),
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(N, INT))))),
  |   |   |   | (UNIT, CallExp(printboard,[])),
  |   |   |   | (UNIT, ForExp(r,true,
  |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   | SimpleVar(N, INT))),
  |   |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   |   | (UNIT, IfExp(
  |   |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   |   | (INT, IfExp(
  |   |   |   |   |   |   |   | (INT, OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   | SubscriptVar(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(row, INT),
  |   |   |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(r, INT)))))),
  |   |   |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   |   |   | (INT, OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   | SubscriptVar(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(diag1, INT),
  |   |   |   |   |   |   |   |   |   |   (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(r, INT))),
  |   |   |   |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(c, INT)))))))),
  |   |   |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   |   | (INT, OpExp(EqOp,
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SubscriptVar(
  |   |   |   |   |   |   |   |   |   SimpleVar(diag2, INT),
  |   |   |   |   |   |   |   |   |   (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   |   (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(r, INT))),
  |   |   |   |   |   |   |   |   |   |   |   (INT, IntExp(7)))),
  |   |   |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(c, INT)))))))),
  |   |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   | (UNIT, SeqExp[
  |   |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   |   | SubscriptVar(
  |   |   |   |   |   |   |   |   SimpleVar(row, INT),
  |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   SimpleVar(r, INT)))),
  |   |   |   |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   |   | SubscriptVar(
  |   |   |   |   |   |   |   |   SimpleVar(diag1, INT),
  |   |   |   |   |   |   |   |   (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(r, INT))),
  |   |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(c, INT)))))),
  |   |   |   |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   |   | SubscriptVar(
  |   |   |   |   |   |   |   |   SimpleVar(diag2, INT),
  |   |   |   |   |   |   |   |   (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(r, INT))),
  |   |   |   |   |   |   |   |   |   |   (INT, IntExp(7)))),
  |   |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(c, INT)))))),
  |   |   |   |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   |   | SubscriptVar(
  |   |   |   |   |   |   |   |   SimpleVar(col, INT),
  |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   SimpleVar(c, INT)))),
  |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(r, INT))))),
  |   |   |   |   |   |   | (UNIT, CallExp(try,[
  |   |   |   |   |   |   |   | (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(c, INT))),
  |   |   |   |   |   |   |   |   | (INT, IntExp(1))))])),
  |   |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   |   | SubscriptVar(
  |   |   |   |   |   |   |   |   SimpleVar(row, INT),
  |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   SimpleVar(r, INT)))),
  |   |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   |   | SubscriptVar(
  |   |   |   |   |   |   |   |   SimpleVar(diag1, INT),
  |   |   |   |   |   |   |   |   (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(r, INT))),
  |   |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(c, INT)))))),
  |   |   |   |   |   |   |   | (INT, IntExp(0)))),
  |   |   |   |   |   |   | (UNIT, AssignExp(
  |   |   |   |   |   |   |   | SubscriptVar(
  |   |   |   |   |   |   |   |   SimpleVar(diag2, INT),
  |   |   |   |   |   |   |   |   (INT, OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   (INT, OpExp(PlusOp,
  |   |   |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(r, INT))),
  |   |   |   |   |   |   |   |   |   |   (INT, IntExp(7)))),
  |   |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(c, INT)))))),
  |   |   |   |   |   |   |   | (INT, IntExp(0))))])))))))])),
  |   (printboard,[],
  |   | UNIT,
  |   | (UNIT, SeqExp[
  |   |   | (UNIT, ForExp(i,true,
  |   |   |   | (INT, IntExp(0)),
  |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   | SimpleVar(N, INT))),
  |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   | (UNIT, SeqExp[
  |   |   |   |   | (UNIT, ForExp(j,true,
  |   |   |   |   |   | (INT, IntExp(0)),
  |   |   |   |   |   | (INT, OpExp(MinusOp,
  |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   | SimpleVar(N, INT))),
  |   |   |   |   |   |   | (INT, IntExp(1)))),
  |   |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   |   | (STRING, IfExp(
  |   |   |   |   |   |   |   | (INT, OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   | SubscriptVar(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(col, INT),
  |   |   |   |   |   |   |   |   |   |   (INT, VarExp(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(i, INT)))))),
  |   |   |   |   |   |   |   |   | (INT, VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(j, INT))))),
  |   |   |   |   |   |   |   | (STRING, StringExp(" O")),
  |   |   |   |   |   |   |   | (STRING, StringExp(" ."))))])))),
  |   |   |   |   | (UNIT, CallExp(print,[
  |   |   |   |   |   | (STRING, StringExp("\\n"))]))]))),
  |   |   | (UNIT, CallExp(print,[
  |   |   |   | (STRING, StringExp("\\n"))]))]))]],
  | (UNIT, SeqExp[
  |   | (UNIT, CallExp(try,[
  |   |   | (INT, IntExp(0))]))])))
5----- queens -----
1,2c1,88
< When this test case seems to work, store the output in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> PROC {name = tigermain, formals = t, locals = 5}
> SEQ(
>   EXP(
>     CONST 0),
>   SEQ(
>     EXP(
>       CONST 0),
>     SEQ(
>       EXP(
>         ESEQ(
>           SEQ(
>             MOVE(
>               MEM(
>                 BINOP(PLUS,
>                   FP,
>                   CONST ~4)),
>               CONST 8),
>             SEQ(
>               MOVE(
>                 MEM(
>                   BINOP(PLUS,
>                     FP,
>                     CONST ~8)),
>                 CALL(
>                   NAME initArray,
>                   MEM(
>                     BINOP(PLUS,
>                       FP,
>                       CONST ~4)),
>                   CONST 0)),
>               SEQ(
>                 MOVE(
>                   MEM(
>                     BINOP(PLUS,
>                       FP,
>                       CONST ~12)),
>                   CALL(
>                     NAME initArray,
>                     MEM(
>                       BINOP(PLUS,
>                         FP,
>                         CONST ~4)),
>                     CONST 0)),
>                 SEQ(
>                   MOVE(
>                     MEM(
>                       BINOP(PLUS,
>                         FP,
>                         CONST ~16)),
>                     CALL(
>                       NAME initArray,
>                       BINOP(MINUS,
>                         BINOP(PLUS,
>                           MEM(
>                             BINOP(PLUS,
>                               FP,
>                               CONST ~4)),
>                           MEM(
>                             BINOP(PLUS,
>                               FP,
>                               CONST ~4))),
>                         CONST 1),
>                       CONST 0)),
>                   MOVE(
>                     MEM(
>                       BINOP(PLUS,
>                         FP,
>                         CONST ~20)),
>                     CALL(
>                       NAME initArray,
>                       BINOP(MINUS,
>                         BINOP(PLUS,
>                           MEM(
>                             BINOP(PLUS,
>                               FP,
>                               CONST ~4)),
>                           MEM(
>                             BINOP(PLUS,
>                               FP,
>                               CONST ~4))),
>                         CONST 1),
>                       CONST 0)))))),
>           CONST 0)),
>       EXP(
>         CONST 0))))
> 
> STRING L0_string = "DefaultString"
> 
----- test09 -----
1,2c1,8
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test09.tig:2.1:type mismatch, expected INT but found STRING
> (INT, IfExp(
>   | (INT, SeqExp[
>   |   | (INT, OpExp(GtOp,
>   |   |   | (INT, IntExp(5)),
>   |   |   | (INT, IntExp(4))))]),
>   | (INT, IntExp(13)),
>   | (STRING, StringExp(" "))))
----- test10 -----
1,2c1,9
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test10.tig:2.1:type mismatch, expected UNIT but found INT
> (UNIT, WhileExp(
>   | (INT, SeqExp[
>   |   | (INT, OpExp(GtOp,
>   |   |   | (INT, IntExp(10)),
>   |   |   | (INT, IntExp(5))))]),
>   | (INT, OpExp(PlusOp,
>   |   | (INT, IntExp(5)),
>   |   | (INT, IntExp(6))))))
----- test11 -----
1,2c1,6
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test11.tig:2.23:can't assign to variable i
> ../testcases/test11.tig:2.1:type mismatch, expected INT but found STRING
> (UNIT, ForExp(i,true,
>   | (INT, IntExp(10)),
>   | (STRING, StringExp(" ")),
>   | (UNIT, ErrorExp)))
----- test13 -----
1,2c1,4
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test13.tig:2.1:type mismatch, expected INT but found STRING
> (INT, OpExp(GtOp,
>   | (INT, IntExp(3)),
>   | (ERROR, ErrorExp)))
----- test14 -----
1,2c1,40
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test14.tig:9.8:type mismatch, expected NIL but found ARRAY of INT
> (INT, LetExp([
>   | TypeDec[
>   |   (rectype,
>   |   | NAME rectype = RECORD
>   name: STRING
>   id: INT
> END),
>   |   (arrtype,
>   |   | NAME arrtype = ARRAY of INT)],
>   | VarDec(rec,true,NAME rectype = RECORD
>   name: STRING
>   id: INT
> END,
>   |   (NAME rectype = RECORD
>   name: STRING
>   id: INT
> END, RecordExp([
>   |   |   (name,
>   |   |   | (STRING, StringExp("aname"))),
>   |   |   (id,
>   |   |   | (INT, IntExp(0)))]))),
>   | VarDec(arr,true,NAME arrtype = ARRAY of INT,
>   |   (NAME arrtype = ARRAY of INT, ArrayExp(
>   |   |   (INT, IntExp(3)),
>   |   |   (INT, IntExp(0)))))],
>   | (INT, SeqExp[
>   |   | (INT, IfExp(
>   |   |   | (INT, OpExp(NeqOp,
>   |   |   |   | (RECORD
>   name: STRING
>   id: INT
> END, VarExp(
>   |   |   |   |   | SimpleVar(rec, RECORD
>   name: STRING
>   id: INT
> END))),
>   |   |   |   | (ERROR, ErrorExp))),
>   |   |   | (INT, IntExp(3)),
>   |   |   | (INT, IntExp(4))))])))
----- test15 -----
1,2c1,4
< When this test case seems to work, store the error message in this file
< such that changes will show up as a nonempty diff with 'make test'
---
> ../testcases/test15.tig:2.1:type mismatch, expected UNIT but found INT
> (INT, IfExp(
>   | (INT, IntExp(20)),
>   | (INT, IntExp(3))))
